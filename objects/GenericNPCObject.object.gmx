<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>MinasDown</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>InteractableParentObject</parentName>
  <maskName>OverworldCharacterMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//AllowInteraction = true;
// Variables to assist actual grid movement
gridSize = 24;    // Set as power of 2 (1,2,4,8,16,32...)
isMoving = false; // True when player walking on grid
moveTimer = 0;    // Set to gridSize when move start
moveSpeed = 1;    // Set as Power of 24
speedX = 0;       // horizontal walking speed
speedY = 0;       // vertical walking speed

// Keep track of direction to change spriteindex
//direction = 270; 

// Helpful for setting state after moving
justStoppedMoving = true;

XOrigin = x;
YOrigin = y;

//if(!variable_local_exists("ID")){//Used for internal identification
    ID = 0;
//}
//if(!variable_local_exists("SpriteID")){//what sprite do we give this character?
    SpriteID = 0;
//}
//if(!variable_local_exists("WanderRadius")){
    WanderRadius = 4;
//}
//if(!variable_local_exists("AllowWander")){
    AllowWander = true;
//}

OverwriteWander = false;

alarm[0] = 60;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if((AllowWander)&amp;&amp;(!OverwriteWander)){
    var _Direction, CanMove, xTemp, yTemp;
    _Direction = round(random_range(1,4));
    CanMove = true;
    
    if (_Direction = 1){
        direction = 0; 
        if((place_free(x+24,y))&amp;&amp;((x+gridSize) &lt; room_width)&amp;&amp;(instance_position(x+24,y,PlayerBlockParent) = noone)&amp;&amp;(Find_Radius_Distance(XOrigin,YOrigin,x+24,y)&lt;=WanderRadius)){
            xTemp = x+24;
            yTemp = y;
            with(PlayerBlockParent){//test if character is already walking to that location
                if((xProjected = xTemp)&amp;&amp;(yProjected = yTemp)){
                    CanMove = false;
                }
            }
            if(CanMove){
                isMoving = true;      // Lets start moving
                moveTimer = gridSize; // Ready moveTimer for countdown
                speedX = moveSpeed;   // Set horizontal speed
                speedY = 0;           // Set vertical speed
            }
            else{
                alarm[0] = 60;
            }
        }
        else{
            alarm[0] = 60;
        }
    }
    else if (_Direction = 2){
        direction = 90;
        if((place_free(x,y-24))&amp;&amp;((y-gridSize) &gt;= 0)&amp;&amp;(instance_position(x,y-24,PlayerBlockParent) = noone)&amp;&amp;(Find_Radius_Distance(XOrigin,YOrigin,x,y-24)&lt;=WanderRadius)){
            xTemp = x;
            yTemp = y - 24;
            with(PlayerBlockParent){
                if((xProjected = xTemp)&amp;&amp;(yProjected = yTemp)){
                    CanMove = false;
                }
            }
            if(CanMove){
                isMoving = true;
                moveTimer = gridSize;
                speedX = 0;
                speedY = -moveSpeed;
            }
            else{
                alarm[0] = 60;
            }
        }
        else{
            alarm[0] = 60;
        }
    }
    else if (_Direction = 3){
        direction = 180;
        if((place_free(x-24,y))&amp;&amp;((x-gridSize) &gt;= 0)&amp;&amp;(instance_position(x-24,y,PlayerBlockParent) = noone)&amp;&amp;(Find_Radius_Distance(XOrigin,YOrigin,x-24,y)&lt;=WanderRadius)){
            xTemp = x-24;
            yTemp = y;
            with(PlayerBlockParent){
                if((xProjected = xTemp)&amp;&amp;(yProjected = yTemp)){
                    CanMove = false;
                }
            }
            if(CanMove){
                isMoving = true;
                moveTimer = gridSize;
                speedX = -moveSpeed;
                speedY = 0;
            }
            else{
                alarm[0] = 60;
            }
        } 
        else{
            alarm[0] = 60;
        }
    }
    else if (_Direction = 4){
        direction = 270;
        if((place_free(x,y+24))&amp;&amp;((y+gridSize) &lt; room_height)&amp;&amp;(instance_position(x,y+24,PlayerBlockParent) = noone)&amp;&amp;(Find_Radius_Distance(XOrigin,YOrigin,x,y+24)&lt;=WanderRadius)){
            xTemp = x;
            yTemp = y+24;
            with(PlayerBlockParent){
                if((xProjected = xTemp)&amp;&amp;(yProjected = yTemp)){
                    CanMove = false;
                }
            }
            if(CanMove){
                isMoving = true;
                moveTimer = gridSize;
                speedX = 0;
                speedY = moveSpeed;
            }
            else{
                alarm[0] = 60;
            }
        }
        else{
            alarm[0] = 60;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if &amp;&amp;(AllowInteraction){// Set standing animations if just stopped
if (justStoppedMoving = true){
    justStoppedMoving = false;
    image_speed = .0625;//idle speed
}
    // When player is moving on grid...
if (isMoving = true){
    image_speed = .125;//walking speed
    x += speedX; // update our x/y positions
    y += speedY;
    moveTimer -= moveSpeed; // countdown moveTimer until 0, then stop moving
    if (moveTimer &lt;= 0){
        isMoving = false;
        justStoppedMoving = true;
        speedX = 0;
        speedY = 0;
        alarm[0] = 60;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//turn this into a script that takes in npc ID, and room (room, story / quest states are global variables so no need to pass those in)
var DialogueState;
DialogueState = PlayerTownObject.DialogueState;

GlobalNpcDialogueScript(ID,DialogueState);

/*
if(DialogueState = 0){
    CreateDialogueBasic(0,0,WordWrap("Placeholder NPC Dialogue!",200,'#',false),self.id,true);
    PlayerTownObject.DialogueState += 1;
}
else if(DialogueState = 1){
    PanOutDialogueBasic();
    PlayerTownObject.DialogueState += 1;
}
else if(DialogueState = 2){
    PlayerTownObject.DialogueState = 0;
    PlayerTownObject.AllowInteraction = true;
    OverwriteWander = false;
    alarm[0] = 60;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//face character in direction of player
//disable movement
//disable alarm

if(!isMoving){//only allow talking if this character is not moving
    if((ID = -1)){
        OverwriteWander = false;
        PlayerTownObject.AllowInteraction = true;
    }
    else{
        OverwriteWander = true;
        direction = (PlayerTownObject.direction + 180) mod 360;
        event_perform(ev_other,ev_user15);//dialogue
    }
}
else {//object is moving, allow player to move.
    PlayerTownObject.AllowInteraction = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite_index = Get_Character_Sprite(SpriteID,direction);
draw_sprite(sprite_index,image_index,round(x), round(y));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
