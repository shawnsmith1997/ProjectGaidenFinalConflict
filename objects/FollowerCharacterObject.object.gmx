<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>LosMaxDown</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>PlayerBlockParent</parentName>
  <maskName>OverworldCharacterMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//AllowInteraction = true;
// Variables to assist actual grid movement
gridSize = 24;    // Set as power of 2 (1,2,4,8,16,32...)
isMoving = false; // True when player walking on grid
moveTimer = 0;    // Set to gridSize when move start
moveSpeed = 2.4;  // Set as Power of 24
speedX = 0;       // horizontal walking speed
speedY = 0;       // vertical walking speed
image_speed = .0625;//idle speed
// Keep track of direction to change spriteindex
direction = 270; 

// Helpful for setting state after moving
justStoppedMoving = true;

//if(!variable_local_exists("ID")){
    ID = 2;
//}
//if(!variable_local_exists("Position")){
    Position = 1;
//}
//if(!variable_local_exists("_Parent")){
    _Parent = self;
//}

//Fix this for studio, define in instance creation event.
xProjected = _Parent.x;
yProjected = _Parent.y;

depth = -50 + ID; //set depth to their position in the chain. -50 is the layer the player is on. 

//Cutscene Stuff
//if(!variable_local_exists("CutsceneMode")){
    CutsceneMode = false;
//}
MovementState = 0;
MovementScriptID = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if &amp;&amp;(AllowInteraction){// Set standing animations if just stopped
if(!CutsceneMode){
    if (justStoppedMoving = true){
        justStoppedMoving = false;
        image_speed = .0625;//idle speed
    }
        // When player is moving on grid...
    if (isMoving = true){
        image_speed = .125;//walking speed
        x += speedX; // update our x/y positions
        y += speedY;
        moveTimer -= moveSpeed; // countdown moveTimer until 0, then stop moving
        if (moveTimer &lt;= 0){
            isMoving = false;
            justStoppedMoving = true;
            speedX = 0;
            speedY = 0;
            x = round(x);
            y = round(y)
            
            var SelfPosition, _Self; 
            SelfPosition = Position;
            _Self = self.id;
            with(FollowerCharacterObject){
                if(Position = SelfPosition + 1){
                    xProjected = _Self.x;
                    yProjected = _Self.y;
                }
            }
        }
        else if(moveTimer = (gridSize/10)*5){//fire off the move event for the next character in the chain
            var ParentX, ParentY, SelfPosition;
            ParentX = xProjected;
            ParentY = yProjected;
            SelfPosition = Position;
            with(FollowerCharacterObject){
                if(Position = SelfPosition + 1){
                    if(Find_Radius_Distance(_Parent.x,_Parent.y,x,y)&gt;1){
                        event_perform(ev_other,ev_user0);
                    }
                }
            }
        }
    }
}
else if(CutsceneMode){//overwrite controls for cutscene
    if(isMoving){
        //image_speed = .125;//walking speed
        x += speedX; // update our x/y positions
        y += speedY;
        moveTimer -= moveSpeed; // countdown moveTimer until 0, then stop moving
        if (moveTimer &lt;= 0){
            isMoving = false;
            justStoppedMoving = true;
            speedX = 0;
            speedY = 0;
            x=round(x);//Fix any floating point errors (needed for precise collision detection)
            y=round(y);
            GlobalMovementScript(MovementScriptID,self.id);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//this will always move them to the previous location of the character in front of them
speedX = -round(x-xProjected)/10;
speedY = -round(y-yProjected)/10;

if((speedX != 0)||(speedY != 0)){//fire only if we are moving
    //What direction do we face the character?
    if(speedX &gt;0){
        direction = 0;
    }
    else if(speedX &lt; 0){
        direction = 180;
    }
    else if(speedY &gt; 0){
        direction = 270;
    }
    else if(speedY &lt; 0){
        direction = 90
    }
    //set direction to face.
    isMoving = true;      // Lets start moving
    moveTimer = gridSize;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite_index = Get_Character_Sprite(ID,direction);
draw_sprite(sprite_index,image_index,round(x), round(y));
//draw_set_color(c_white);//Debug stuff
//draw_text(x,y,Find_Radius_Distance(_Parent.x,_Parent.y,x,y));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
