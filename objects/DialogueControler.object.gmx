<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>message = "You'll probably never see this message!" //The message to print out
message_draw=""; //this is what we 'write' out. It's blank right now. Message to be appended 1 letter at a time. 
characters=0; //how many characters have already been drawn
hold=0; //if we hold 'Z', the text will render faster

message_length=string_length(message); //get the number of characters in the first message

image_index = -1; 
image_speed = .01;
ChatAnimate = false;
PortraitVisible = true;
SkipEvent = false;
Voice = Dialogue2Sound;

CurrentObject = 0; //What object is feeding events to this controler? (to be set when created by said object)
DisplayArrow = true; //Do we display the flasing arrow?
ArrowState = 0; //Used for flashing the arrow.

PortraitPan = 100;//Portrait
WindowPan= 100;//Dialogue Window

PortraitPanDirection = 'none'; //For Panning in the Character Portrait.
WindowPanDirection = 'none'; //For Panning in the dialogue Window.

PanDirection = 'none';//global Pan flag "in" or "out", 'none' means it's not panning.

LineNumber = 1; //Used for scrolling text. Should this get to 3, it would delete line 1 and shift the text up 1 line. 
AllowInteraction = true; //if "false" the player cannot interact with this object, but they can still speed up dialogue. 
AllowSpeedUp = true; //Do you want to allow the player to be able to speed up dialogue? (You might not for things like opening cutscene).

ArrowOverride = false;//This allows for the user to override the state of the flashing arrow and break the flash loop.message_alpha
SoundDelay = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//The last thing this dialogue controler does before it is brutally destroyed
//is to call the "CurrentObject's" event to figure out what happens next.
with(CurrentObject){
    event_perform(ev_other,ev_user15);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//For drawing the flashing arrow
if(characters &gt;= message_length){
    if(ArrowState = 0){
        ArrowState = 1;
    }
    else{
        ArrowState = 0;
    }
    if(!ArrowOverride){
    alarm[1] = 15;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Takes care of printing out the message letter by letter based on speed.
if (characters &lt; message_length){ //if current character count is less than the amount in current message
    //ArrowState = 0; //Disable the blinking arrow if not done.
    characters +=1; //Display a new letter.
    
    if(string_char_at(message,characters) = '\'){//In case we want to print out # or @ or ^ as a symbol instead of newline / perform action / half second delay
        if((string_char_at(message,characters+1) = '#') || (string_char_at(message,characters+1) = '@')|| (string_char_at(message,characters+1) = '^')){
            characters +=1;
            message_draw=string_copy(message,0,characters); //copy string to current character
            alarm[0] = 1; 
            exit;
        }
    }
    
    message_draw=string_copy(message,0,characters); //copy string to current character
    
    
    var ChatSpeed, temp;
    hold=keyboard_check(global.SelectButton) * AllowSpeedUp; //hold is true or false if we hold 'Z' or not and if we allow the player to speed up text.
    ChatSpeed = (global.GameSpeed+(2*hold)); //increase speed based on hold
    temp = string_char_at(message_draw,characters);//the last letter in the message
    
    if(temp = '@'){//If we have an action, then break and call the event. (For things like pauses, ect.)
        message_draw = string_delete(message_draw,characters,1);
        message = string_delete(message,characters,1);
        message_length=string_length(message); //get the number of characters in the first message
        characters -= 1;
        ChatAnimate = false;//Dont animate portrait
        with(CurrentObject){
            event_perform(ev_other,ev_user15);
        }
    }
    else if(temp = '^'){// the '^' symbol will delay the dialogue for half a second.
        message_draw = string_delete(message_draw,characters,1);
        message = string_delete(message,characters,1);
        message_length=string_length(message); //get the number of characters in the first message
        characters -= 1;
        SoundDelay = 1;//play beep when we return
        ChatAnimate = false;//Dont animate portrait
        alarm[0] = 30; 
            exit;
    }
    
    
    else{//if no event, continue with the other stuff
        if(temp = '#'){//If we have more than 3 lines, Delete the first and pan the message up a line.
            LineNumber += 1;
                if(LineNumber = 4){
                    LineNumber -= 1;
                    var CharactersToRemove, index;
                    CharactersToRemove = 0;
                    index = string_char_at(message_draw,CharactersToRemove);//the last letter in the message
                    
                    while(index != '#'){
                        CharactersToRemove += 1;
                        index = string_char_at(message_draw,CharactersToRemove);//the last letter in the message
                    }
                    
                    message_draw = string_delete(message_draw,1,CharactersToRemove);
                    message = string_delete(message,1,CharactersToRemove);
                    message_length=string_length(message); //get the number of characters in the first message
                    characters -= CharactersToRemove;
                
                }
        }
        
        if((temp != ' ')&amp;&amp;(temp != '#')&amp;&amp;(temp != '.')){//Dont "talk" for spaces or newlines, or periods
            ChatAnimate = true;//Dont animate portrait
        }
        else{
            ChatAnimate = false;//animate portrait
        }
        
        //This junk basically just spreads out the bleeps at higher speeds so you dont get a memory error. 
        //if(((ChatSpeed = 6)&amp;&amp;(frac(characters/5)= 0))||((ChatSpeed = 5)&amp;&amp;(frac(characters/3)= 0))||((ChatSpeed = 4)&amp;&amp;(frac(characters/2)= 0))||((ChatSpeed = 3)&amp;&amp;(frac(characters/1.5)&lt; .5))||(ChatSpeed = 2)||(ChatSpeed=1)||(characters = 1)){
        if((temp = ' ')||(temp = '#')){//Dont play bleeps for spaces or newlines, Play the sound directly afterwords
           SoundDelay = 1;
        }
        else if(SoundDelay != 0){
           SoundDelay -= 1;
        }
        if(SoundDelay &lt;= 0){
            //Get Sound to play script.
            if(Voice != noone){
                sound_play(Voice);
            }
     
            switch(ChatSpeed){
                case 3: SoundDelay = 1; break;
                case 4: SoundDelay = 2; break;
                case 5: SoundDelay = 3; break;
                case 6: SoundDelay = 4; break;
                default: SoundDelay = 0;
            }
        }
        //Display a new letter in x steps based on speed.
        switch(ChatSpeed){
            case 1: alarm[0] = 6; break;
            case 2: alarm[0] = 5; break;
            case 3: alarm[0] = 4; break;
            case 4: alarm[0] = 3; break;
            case 5: alarm[0] = 2; break;
            case 6: alarm[0] = 1; break;
        }
    }
}





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//================//
//=Panning Stuff =//
//================//
if(PanDirection != 'none'){
    //==Panning In==//
    if(PanDirection = 'in'){
        if(PortraitPanDirection = 'in'){//Pan Portrait In
            PortraitPan -= 14;
            if(PortraitPan &lt;= 0){
                PortraitPan = 0;
                PortraitPanDirection = 'none';
                WindowPanDirection = 'in';
            }
        }
        if(WindowPanDirection = 'in'){ //Pan Dialogue Window In
            WindowPan -= 14;
            if(WindowPan &lt;= 0){
                WindowPan = 0;
                WindowPanDirection = 'none';
                PanDirection = 'none';
                if(SkipEvent){ //Bypass calling user15 of CurrentObject and start printing out dialogue. (used for most dialogue calls)
                    alarm[0] = 1;//Start printing dialogue.
                }
                else{
                    with(CurrentObject){
                        event_perform(ev_other,ev_user15);//Figure out what to do next. (For those advanced things that you cant do by default)
                    }
                }
            }
        } 
    }
    //==Panning Out==//
    if(PanDirection = 'out'){
        if(PortraitPanDirection = 'out'){ //Pan Portrait Out
            PortraitPan += 14;
            if(PortraitPan &gt;= 100){
                PortraitPan = 100;
                PortraitPanDirection = 'none';
            }
        }
        if(WindowPanDirection = 'out'){ //Pan Dialogue Window Out
            WindowPan += 14;
            if(WindowPan &gt;= 100){
                WindowPan = 100;
                WindowPanDirection = 'none';
                if(SkipEvent){//Bypass calling destroy from the other object for simplicity. (most dialogue calls)
                    instance_destroy();
                }
                else{
                    with(CurrentObject){
                        event_perform(ev_other,ev_user15); //What do we do next? (For those advanced things that you cant do by default)
                    }
                }
            }
        } 
    }
}

//==================//
//= Continue Stuff =//
//==================//

if(characters &gt;= message_length){//if current character is more than the amount in the current message (if we are at the end of the message)
    ChatAnimate = false; //Dont animate the Portrait anymore.
    if(DisplayArrow){
        DisplayArrow = false;//Make sure we dont call this again.
        alarm[1] = 1;//Enable Arrow Flash
    }
    if (keyboard_check_pressed(global.SelectButton)&amp;&amp;(AllowInteraction)){ //if we press Continue...
        AllowInteraction = false;
        with (CurrentObject){
            event_perform(ev_other,ev_user15); //Call the next part of the script given by whichever object created this one.
        }
    }
}
if(ChatAnimate){
    global.Talking = 1;
}
else if(!ChatAnimate){
    global.Talking = 0;
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(DialogueWindow,0,view_xview + 10, view_yview + 194 + WindowPan) // draws the dialogue window

draw_set_font(DialogueFont); //Font
draw_set_color(c_white); //Color
draw_set_halign(fa_left); //Alignment

draw_text(view_xview + 20, view_yview + 202 + WindowPan,message_draw); //draw the text at the coordinates
if(characters &gt;= message_length){//If we are done with the message, Display the arrow (If arrow is not to be shown, it's blank frame is drawn)
    draw_sprite(ContinueSprite,ArrowState,view_xview + 227, view_yview + 238 + WindowPan)// "ArrowState" is the frame to be drawn. 0-1
}

if(PortraitVisible = true){ //If we are drawing a portrait,
/*
    if (keyboard_check(vk_numpad1)){
        image_speed = .25;
    }
    else{
        image_speed = .125;
    }*/
    image_speed = (global.GameSpeed+(2*hold))/30;

    if (ChatAnimate = true){
        draw_sprite(Get_Portrait(PortraitID),-1,view_xview + 8, view_yview + 8 - PortraitPan);
    }
    else{
        draw_sprite(Get_Portrait(PortraitID),0,view_xview + 8, view_yview + 8 - PortraitPan);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
