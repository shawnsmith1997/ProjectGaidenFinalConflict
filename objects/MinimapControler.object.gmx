<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>visible = true;
image_speed = .0625;

Pan = 300;
PanDirection = 'none';
AllowInteraction = false;
State = 0;
Display = false;
//Color, Alpha, Stop, Speed, Direction, Current Object
CreateScreenFade(c_black,0,.45,.04,'out',MinimapControler);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Pan Minimap In
if(PanDirection = 'in'){
    Pan -= 30;
    if(Pan &lt;=0){
        Pan = 0;
        PanDirection = 'none';
        AllowInteraction = true;
    }
}
if(PanDirection = 'out'){
    Pan -= 30;
    if(Pan &lt;=-300){
        Pan = -300;
        PanDirection = 'none';
        instance_create(0,0,CursorMenuControler);
        with(CursorMenuControler){
            MenuAnimLeft = -1;
            sound_play(MenuPanSound);
            PanDirection = 'left';
            MenuPanX = 200;
            MenuPanY = 0;
        }
        instance_destroy();
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Key Event Listeners
if(AllowInteraction){
    //Back
    if (keyboard_check_pressed(global.BackButton)){
        AllowInteraction = false;
        //Color, Alpha, Stop, Speed, Direction, Current Object
        ScreenFade(0,.04,'in',MinimapControler);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Calls from screen fade controler
if(State = 0){
    CreateMinimapSurface();
    sound_play(MenuPanSound);
    Display = true;
    PanDirection = 'in';
    State +=1;
}
else{
    with(ScreenFadeControler){
        instance_destroy();
    }
    PanDirection = 'out';
    sound_play(MenuPanSound);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(Display){
    if !surface_exists(MinimapSurface){
        CreateMinimapSurface();
    }
    draw_surface(MinimapSurface,view_xview + Pan + ((view_wview/2) - (((room_width/6)+14))/2), view_yview + ((view_hview/2) - (((room_height/6)+14))/2));//Draw Minimap Window
    if(global.battleID = 1){
        draw_sprite(Battle01Map,-1,view_xview + 7 + Pan + ((view_wview/2) - (((room_width/6)+14))/2), view_yview + 7 + ((view_hview/2) - (((room_height/6)+14))/2));
    }
    else if(global.battleID = 23){
        draw_sprite(SecretLevelMap,-1,view_xview + 7 + Pan + ((view_wview/2) - (((room_width/6)+14))/2), view_yview + 7 + ((view_hview/2) - (((room_height/6)+14))/2));
    }
    
    //Now the background is drawn, we need to display the character locations
    
    with(objGuy){//Have every guy tell the minimap controler to draw marker sprites
        var MinimapX, MinimapY;
        MinimapX = x;
        MinimapY = y;
        if(GuyType = 'player'){
            with(MinimapControler){
                draw_sprite(GreenMinimapSprite,-1,view_xview + Pan + ((view_wview/2) - (((room_width/6)))/2)+MinimapX/6, view_yview + ((view_hview/2) - (((room_height/6)))/2)+MinimapY/6)
            }
        }
        else if(GuyType = 'enemy'){
            with(MinimapControler){
                draw_sprite(RedMinimapSprite,-1,view_xview + Pan + ((view_wview/2) - (((room_width/6)))/2)+MinimapX/6, view_yview + ((view_hview/2) - (((room_height/6)))/2)+MinimapY/6)
            }
        }
        //Could always add more, "ally, neutral, ect"
        else{
        
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
