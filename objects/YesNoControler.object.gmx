<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>BlankSprite</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>CurrentObject = 0; //Object that triggers or needs the Y/N answer
State = 'yes';
image_index = -1;
image_speed = .0625;
pan = 100;
panDirection = 'none';

AllowInteraction = false; //Prevents holding down button and auto advancing.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Pans
if(PanDirection != 'none'){
    if(PanDirection = 'in'){
        if(pan &gt; 0){
            pan -= 25;
        }
        else{
            pan = 0;
            PanDirection = 'none';
            AllowInteraction = true;
        }
    }
    //Pan out and call user 14 of other object.
    if(PanDirection = 'out'){
        if(pan &lt; 100){
            pan += 25;
        }
        else{
            pan = 100;
            PanDirection = 'none';
            with(CurrentObject){
                YesNoAnswer = YesNoControler.State;
                event_perform(ev_other, ev_user14);
            }
            instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Key Event Listeners
if(AllowInteraction){
    //Select
    if (keyboard_check_pressed(global.SelectButton)){
        PanDirection = 'out';
        sound_play(MenuPanSound);
    }
    
    //Back
    if (keyboard_check_pressed(global.BackButton)){
        State = 'no';
        PanDirection = 'out';
        sound_play(MenuPanSound);
    }
    
    //Left
    if (keyboard_check_pressed(global.LeftButton)){
        sound_play(MenuMoveSound);
        State = 'yes';
    }
    
    //Right
    if (keyboard_check_pressed(global.RightButton)){
        sound_play(MenuMoveSound);
        State = 'no';
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>


if(State = 'yes'){
draw_sprite(YesMenuSprite,-1,view_xview+96 + pan, view_yview+150);
draw_sprite(NoMenuSprite,0,view_xview+135 + pan, view_yview+150);
}
else if(State = 'no'){
draw_sprite(YesMenuSprite,0,view_xview+96 + pan, view_yview+150);
draw_sprite(NoMenuSprite,-1,view_xview+135 + pan, view_yview+150);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
