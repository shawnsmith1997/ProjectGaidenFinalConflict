<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Deals with using items.
Character1 = 0;//the character who's item we're using
Character2 = 0;//the character using the item
ItemSlot = 0;//item being given
ItemSlot2 = 0;//item being recieved
State = 0;//Curent State of the script
CurrentObject = noone;//current Object
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.isMovable = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//dialogue controler calls
event_perform(ev_other,ev_user0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Figure out what item script to call
switch (State){
    case 0:
    with(MemberListControler){
        //SubDisplay = 'default';
        State = 'SelectingGiveTarget';
        PanDirection = 'in';
        sound_play(MenuPanSound);
    }
    //CreateDialogueBasic(0,0,WordWrap(string('The ' + Get_Item_Stats(global.Items[Character1,ItemSlot],2)+ Get_Item_Stats(global.Items[Character1,ItemSlot],3)+' will be discarded. OK?@ '),200,'#',false), self.id, true);
    State = 10;
    break;
    
    case 10://trade item
    if( (Get_Item_Stats(global.Items[Character1,ItemSlot],'Cursed') = 1 and ( (global.Equipped_Weapon[Character1] = ItemSlot) or (global.Equipped_Item[Character1] = ItemSlot) )) or (Get_Item_Stats(global.Items[Character2,ItemSlot],'Cursed') = 1 and ( (global.Equipped_Weapon[Character2] = ItemSlot) or (global.Equipped_Item[Character2] = ItemSlot)) )){
        CreateDialogueBasic(0,0,WordWrap(string('The item is cursed!'),200,'#',false), self.id, true);
        sound_play(CurseSound);
    } 
    else{
        if(Character1 = Character2){//if same character
            CreateDialogueBasic(0,0,WordWrap(string('The ' + Get_Item_Stats(global.Items[Character1,ItemSlot],'Name')+ Get_Item_Stats(global.Items[Character1,ItemSlot],'Name2')+' is now held in a different hand.'),200,'#',false), self.id, true);
        }
        else if(ItemSlot2 = 0){//if not recieving an item in return
            CreateDialogueBasic(0,0,WordWrap(string('The ' + Get_Item_Stats(global.Items[Character1,ItemSlot],'Name')+ Get_Item_Stats(global.Items[Character1,ItemSlot],'Name2')+' now belongs to ' + global.Name[Character2] + '.'),200,'#',false), self.id, true);
        }
        else{
            CreateDialogueBasic(0,0,WordWrap(string(global.Name[Character1]+"'s " + Get_Item_Stats(global.Items[Character1,ItemSlot],'Name')+ Get_Item_Stats(global.Items[Character1,ItemSlot],'Name2')+' was traded for ' + global.Name[Character2] + "'s " + Get_Item_Stats(global.Items[Character2,ItemSlot2],'Name')+ Get_Item_Stats(global.Items[Character2,ItemSlot2],'Name2')+ '.'),200,'#',false), self.id, true);
        }
        Trade_Items_Town(Character1,Character2,ItemSlot,ItemSlot2);
    }
    State = 20;
    //event_perform(ev_other,ev_user0);
    break;
    
    case 20:
        PanOutDialogueBasic();
        State = 30;
    break;
    
    case 30:
        //end item drop, return to items menu
        with(CurrentObject){
            Action = 'BackOut';
            event_perform(ev_other,ev_user0);
        }
        instance_destroy();
    break;

}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
