<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>ControlerSprite</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>State = 'none';
sprite_index = BlankSprite;
visible = true;
Display = false; //Whether we display battle HUD and menus or not
BuffState = 0;
image_speed = .0625;

HUDPan = 200;//BattleHUD
LEPan = -200;//LandEffect

AllowInteraction = false;

HUDPanDirection = 'none';
LEPanDirection = 'none';

Deaths = 0;
StatusEffectState = 0;//for the status effect script. 
DialogueState = 0;//for dialogue messages
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(Display){
    var CurrentCharacter;
    CurrentCharacter = Cursor.TurnOrder[Cursor.CurrentTurn];
    
    /*===================*/
    /*Slide Battle HUD in*/
    /*===================*/
    
    if(HUDPanDirection = 'in'){//Slide Battle HUD in
        if(HUDPan &gt; 0){
            HUDPan -= 45;
            if(HUDPan &lt;= 0){
                HUDPan = 0;
                HUDPanDirection = 'none';
                LEPanDirection = 'in';
                sound_play(MenuPanSound);
            }
        }
    }
    //Slide Land Effect Window in
    if(LEPanDirection = 'in'){
        if(LEPan &lt; 0){
            LEPan += 45;
            if(LEPan &gt;= 0){
                LEPan = 0;
                LEPanDirection = 'none';
                CurrentCharacter.Active = true;//Allow player to move character.
                State = 'MovingCharacter';
                if(CurrentCharacter.GuyType = 'player'){
                    AllowInteraction = true;//Allow the player to use the controler object
                }
            }
        }
    }
    
    /*====================*/
    /*Slide Battle HUD out*/
    /*====================*/
    
    //Slide Land Effect Window out
    if(LEPanDirection = 'out'){
        if(LEPan &gt; -200){
            LEPan -= 45;
            if(LEPan &lt;= -200){
                LEPan = -200;
                LEPanDirection = 'none';
                HUDPanDirection = 'out';
                sound_play(MenuPanSound);
            }
        }
    }

    if(HUDPanDirection = 'out'){//Slide Battle HUD out
        if(HUDPan &lt; 200){
            HUDPan += 45;
            if(HUDPan &gt;= 200){
                HUDPan = 200;
                HUDPanDirection = 'none';
                event_perform(ev_other,ev_user0);
            }
        }
    }
    
    
}






</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Key Event Listeners
if(AllowInteraction){
    //Select
    if (keyboard_check_pressed(global.SelectButton)){
        if(State = 'MovingCharacter'){//If we can move the character around.
            var CurrentCharacter;
            CurrentCharacter = Cursor.TurnOrder[Cursor.CurrentTurn];
            
            if((CurrentCharacter.Active)&amp;&amp;(!CurrentCharacter.isMoving)){//make sure that we can move the guy, and that we are fully stopped on a tile. 
                with (CurrentCharacter){
                    if (place_meeting(round(x),round(y),objGuy)){//if you try to stay on a team member
                        sound_play(ErrorSound);//Denied!
                    }
                    else{
                        Active = false;//Prevent character from being able to move.
                        
                        var Search,Chest;
                        Search = false;
                        //==============Chest loot
                        switch(direction){
                            case 0:
                                if(instance_position(x+24,y,LootableObject)!= noone){//if container exists
                                    if(!instance_position(x+24,y,LootableObject).Looted){//if it has not been looted
                                        Search = true;
                                        Chest = instance_position(x+24,y,LootableObject);
                                    }
                                }
                                break;
                            case 90:
                                if(instance_position(x,y-24,LootableObject)!= noone){//if container exists
                                    if(!instance_position(x,y-24,LootableObject).Looted){//if it has not been looted
                                        Search = true;
                                        Chest = instance_position(x,y-24,LootableObject)
                                    }
                                }
                                break;
                            case 180:
                                if(instance_position(x-24,y,LootableObject)!= noone){//if container exists
                                    if(!instance_position(x-24,y,LootableObject).Looted){//if it has not been looted
                                        Search = true;
                                        Chest = instance_position(x-24,y,LootableObject)
                                    }
                                }
                                break;
                            case 270:
                                if(instance_position(x,y+24,LootableObject)!= noone){//if container exists
                                    if(!instance_position(x,y+24,LootableObject).Looted){//if it has not been looted
                                        Search = true;
                                        Chest = instance_position(x,y+24,LootableObject);
                                    }
                                }
                                break;
                        }
                        
                        if(!Search){//look down only if we cant search
                            direction = 270;//Have character face down.
                        }
                        var Targets;//Turn this into a (get targets) script, it will also need "muddled" tags.
                        if (GuyType = 'player'){
                            Targets = 2;//2 means target enemies
                        }
                        else if(GuyType = 'enemy'){
                            Targets = 1;//1 means target players
                        }
                        FindAttackRange(instance_position(round(x), round(y), objCell),Get_Battle_Stat_Total(self,'AttackRange'),Get_Battle_Stat_Total(self,'AttackLimit'),Targets);
                        
                        instance_create(0,0,MainBattleMenuControler);
                        with(MainBattleMenuControler){
                            if(Cursor.NumberOfTargets &gt; 0){
                                MenuAnimTop = -1;
                            }
                            else{
                                MenuAnimBottom = -1;
                            }
                            if(Search){
                                MenuBottomVar = SearchMenuSprite;
                                MenuBottomName = 'SEARCH';
                                Container = Chest;
                            }
                            BattleControler.State = 'none'; //turns the controler off so it wont do anything.
                            BattleControler.AllowInteraction = false;//We cant interact with the battle controler anymore. 
                            ResetTiles();//Disable tile glow and set them back to being blocked.
                            sound_play(MenuPanSound);
                            MenuPanY = 100//Start at the bottom.
                            PanDirection = 'up';
                        }
                    }
                }
            }
        }
    }
    
    //Back
    if (keyboard_check_pressed(global.BackButton)){
        //Walk Character back to start location.
        var CurrentCharacter;
        CurrentCharacter = Cursor.TurnOrder[Cursor.CurrentTurn];
        if((State = 'MovingCharacter')&amp;&amp;(!CurrentCharacter.isMoving)){
            if(instance_position(round(CurrentCharacter.x), round(CurrentCharacter.y), objCell).Reachable){//in case of mobility ring exploit... Do nothing. (Prevent bug until future fix)
                AllowInteraction = false;//We cant interact with the battle controler anymore. 
                LEPanDirection = 'out';
                sound_play(MenuPanSound);
            }
        }
    }
 }


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//ChestScript(Chest);
if(State = 'EndTurnStatusEffects'){

    if(StatusEffectState = 0){
        PanOutDialogueBasic();
        StatusEffectState = 10;
    }
    else{
        var CurrentCharacter;
        CurrentCharacter = Cursor.TurnOrder[Cursor.CurrentTurn];
        if(CurrentCharacter.Health &lt;= 0){
            with(CurrentCharacter){
                alarm[3] = 1;//they are dead, play swirly swirly bang.
            }
        }
        else{
            StatusEffectState = 0;
            State = 'none';
            Cursor.CurrentTurn += 1;
            Cursor.State = 'LookingToPathfind';
            Cursor.visible = true;
            with(Cursor){
                alarm[0] = 2;
            }
        }
    }
}
else if(State = 'RevealHidden'){
    if(DialogueState = 0){//display 'appeared' message
        var CurrentCharacter;
        CurrentCharacter = Cursor.TurnOrder[Cursor.CurrentTurn];
        CreateDialogueBasic(0,0,WordWrap(string(CurrentCharacter.Name) + ' appeared.',200,'#',false), self.id, true);
        DialogueState = 10;
    }
    else if(DialogueState = 10){//pan out the dialogue
        PanOutDialogueBasic();
        DialogueState = 20;
    }
    else if(DialogueState = 20){//end turn
        DialogueState = 0;
        State = 'Stay';
        event_perform(ev_other,ev_user0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//=====================//
//If backed out of menu//
//=====================//
if(State = 'BackOutOfMenu'){
    var CurrentCharacter;
    CurrentCharacter = Cursor.TurnOrder[Cursor.CurrentTurn];
    with(CurrentCharacter){
        Active = true;
        FindMovementRange(instance_position( xOrig , yOrig , objCell ), self.id);//find the player's movement range
        FlashMoveTiles();//Display tile flashes
    }
    State = 'MovingCharacter';
    AllowInteraction = true;//We can interact with the battle controler again. 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This takes care of status effect stuff.
var CurrentCharacter;
CurrentCharacter = Cursor.TurnOrder[Cursor.CurrentTurn];

if(CurrentCharacter != noone){//in case they died from a counter attack or something
    var Message;
    Message = GlobalStatusEffectScript();
    
    if(Message != ''){
        CreateDialogueBasic(0,0,WordWrap(Message,200,'#',false), self.id, true);
    }
    else{
        StatusEffectState = 0;
        State = 'none';
        Cursor.CurrentTurn += 1;
        Cursor.State = 'LookingToPathfind';
        Cursor.visible = true;
        with(Cursor){
            alarm[0] = 2;
        } 
    }
}
else{//if the character is dead, advance cursor thingy. 
    StatusEffectState = 0;
    State = 'none';
    Cursor.CurrentTurn += 1;
    Cursor.State = 'LookingToPathfind';
    Cursor.visible = true;
    with(Cursor){
        alarm[0] = 2;
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Creates and displays the Land Effect Window
var CurrentCharacter;
CurrentCharacter = Cursor.TurnOrder[Cursor.CurrentTurn];
CreateLandEffectWindow(CurrentCharacter);
CreateBattleHUD(CurrentCharacter, "main");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//================================//
//Walk Character to start location//
//================================//
var Message;
Message = '';
if(State = 'MovingCharacter'){
    var CurrentCharacter;
    CurrentCharacter = Cursor.TurnOrder[Cursor.CurrentTurn];
    State = 'none';
    if (CurrentCharacter.x = CurrentCharacter.xOrig &amp;&amp; CurrentCharacter.y = CurrentCharacter.yOrig){ //If the player is at its starting location.
        CurrentCharacter.direction = 270;//Have character face down.
        Display = false;//Prevent controler from displaying battle HUD ect. 
        ResetTiles();
        Cursor.State = 'ManualMovement';//allow cursor to move
        Cursor.visible = true;//Show Cursor
    }
    
    else{//Start walking back to start location.
        Display = false;//Controler no longer draws anything.
        with (CurrentCharacter){
            State = 'WalkingToStartPosition';//Prevent player from moving via arrow keys ect.
            Temp = 24;//Timer for the move sound. (Tile size)
            AStar_init(global.RoomCellWidth,global.RoomCellHeight,24,24,0,0,0,0,-2,-2,0,0);
            myPath = -1;
            with ( objCell ){
                AStar_setBlocked(x,y,1);
                if ( Reachable ){
                    AStar_setBlocked(x,y,0);
                }
            }
            
            myPath = AStar_findPath(x,y,xOrig,yOrig,0);
            //path_start(myPath,2.4,0,0);
            path_start(myPath,3,0,0);
            xstart = x;
            ystart = y;
        }
    }
}

//===============//
//If Player Stays//
//===============//
else if(State = 'Stay'){
    var CurrentCharacter;
    CurrentCharacter = Cursor.TurnOrder[Cursor.CurrentTurn];
    
    with(CurrentCharacter){
        IsTurn = false;
        xOrig = x;
        yOrig = y;
        depth = -10;
        if(GuyType = 'player'){//test if we update AI or not
            Update_Battle_State();
        }
    }
    
    /*with(CurrentCharacter){
        if(GuyType = 'player'){
            if (CurrentCharacter.AttackBuff != 0){
                CurrentCharacter.AttackBuff -=1;
                if (CurrentCharacter.AttackBuff = 0){
                    Message += ("The Effects of the Spell wore off!");
                }
            }
            if (CurrentCharacter.QuickBuff != 0){
                CurrentCharacter.QuickBuff -=1;
                if (CurrentCharacter.QuickBuff = 0){
                    Message += ("The Effects of the Spell wore off!");
                }
            }        
        }
    }*/
      
    Display = false;
    State = 'EndTurnStatusEffects';
    StatusEffectState = 0;//reset the SE state before we call the script. 
    event_perform(ev_other,ev_user2);
    /*
    State = 'none';
    Cursor.CurrentTurn += 1;
    Cursor.State = 'LookingToPathfind';
    Cursor.visible = true;
    with(Cursor){
        alarm[0] = 2;
    }*/
}







</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.battleID = 1){
sound_play(ShrineBGM);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(Display){
    var CurrentCharacter;
    CurrentCharacter = Cursor.TurnOrder[Cursor.CurrentTurn];
    //Surface memory is temorary. if you resize the window, or minimize, ect, you may lose it
    //this is the failsafe for such an event. If surface doesnt exist, re-create it.
    if (!surface_exists(LandEffectWindowSurface)){
        CreateLandEffectWindow(CurrentCharacter);
    }
    draw_surface(LandEffectWindowSurface,view_xview + 5+LEPan, view_yview + 8);//Draw Land Effect Window
    
    if (!surface_exists(MainBattleHUDSurface)){
        CreateBattleHUD(CurrentCharacter, "main");
    }
    draw_surface(MainBattleHUDSurface,view_xview + 73 + 182 - GetBattleHUDSize(CurrentCharacter) + HUDPan, view_yview + 8);//Draw Land Effect Window
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="70">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.VictoryFlag = true;
EnemyDeathScript();
instance_create(0,0,VictoryControler);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
