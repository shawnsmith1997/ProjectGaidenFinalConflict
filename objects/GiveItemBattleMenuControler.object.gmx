<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This is the menu object for (Attack, magic, items, stay)
//How fast the menu animates.
AllowInteraction = false;
image_speed = .0625;

var CurrentCharacter;//The guy who's inventory we're messing with.
CurrentCharacter = Cursor.TurnOrder[Cursor.CurrentTurn];

//These are the 4 menu slot sprites (Left and Right are used for yes / no menu)
MenuTopVar = Get_Item_Stats(CurrentCharacter.Items[1],'Sprite')
MenuLeftVar = Get_Item_Stats(CurrentCharacter.Items[2],'Sprite')
MenuRightVar = Get_Item_Stats(CurrentCharacter.Items[3],'Sprite')
MenuBottomVar = Get_Item_Stats(CurrentCharacter.Items[4],'Sprite')

//These animate the menu when selected. 0 for not animated, -1 for animated.
MenuAnimTop = 0;
MenuAnimBottom = 0;
MenuAnimLeft = 0;
MenuAnimRight = 0;

//The X and Y pans of the menu (For sliding)
MenuPanX = 0;
MenuPanY = 0;

PanDirection = 'none';

PerformEvent = 'none'; //What event do we perform? This is set when selecting or backing out.
DialogueState = 0;
GiveItemSlot = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(PanDirection != 'none'){
//This slides the menu in/out.
    //Panning in
    if(PanDirection = 'up'){
        MenuPanY -= 25;
        if(MenuPanY &lt;= 0){
            MenuPanY = 0;
            PanDirection = 'none';
            AllowInteraction = true;
        }
    }
    
    if(PanDirection = 'left'){
        MenuPanX -= 25;
        if(MenuPanX &lt;= 0){
            MenuPanX = 0;
            PanDirection = 'none';
            AllowInteraction = true;
        }
    }
    
    //Panning out
    if(PanDirection = 'down'){
        MenuPanY += 18;
        if(MenuPanY &gt;= 100){
            MenuPanY = 100;
            PanDirection = 'none';
            event_perform(ev_other,ev_user0);
        }
    }
    
    if(PanDirection = 'right'){
        MenuPanX += 25;
        if(MenuPanX &gt;= 200){
            MenuPanX = 200;
            PanDirection = 'none';
            event_perform(ev_other,ev_user0);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Key Event Listeners
if(AllowInteraction){
    //Select
    if (keyboard_check_pressed(global.SelectButton)){
        //We selected 'Top'
        if(MenuAnimTop = -1){
            PerformEvent = 'Top';
            PanDirection = 'right';
            AllowInteraction = false;
            sound_play(MenuPanSound);
        }
        //We selected 'Left'
        else if(MenuAnimLeft = -1){
            PerformEvent = 'Left'
            PanDirection = 'right';
            AllowInteraction = false;
            sound_play(MenuPanSound);
        }
        //We selected 'Right'
        else if(MenuAnimRight = -1){
            PerformEvent = 'Right'
            PanDirection = 'right';
            AllowInteraction = false;
            sound_play(MenuPanSound);
        }
        //We selected 'Bottom'
        else if(MenuAnimBottom = -1){
            PerformEvent = 'Bottom'
            PanDirection = 'right';
            AllowInteraction = false;
            sound_play(MenuPanSound);
        }
    }
    
    //Back
    if (keyboard_check_pressed(global.BackButton)){
        sound_play(MenuPanSound);
        PerformEvent = 'BackOut';
        AllowInteraction = false;
        PanDirection = 'down';
    }
    
    //Left
    if (keyboard_check_pressed(global.LeftButton)){
        var CurrentCharacter;//The guy who's inventory we're messing with.
        CurrentCharacter = Cursor.TurnOrder[Cursor.CurrentTurn];
        
        if(CurrentCharacter.Items[2] != 0){
            MenuAnimTop = 0;
            MenuAnimBottom = 0;
            MenuAnimLeft = -1;
            MenuAnimRight = 0;
            sound_play(MenuMoveSound);
        }
    }
    
    //Right
    if (keyboard_check_pressed(global.RightButton)){
        var CurrentCharacter;//The guy who's inventory we're messing with.
        CurrentCharacter = Cursor.TurnOrder[Cursor.CurrentTurn];
        
        if(CurrentCharacter.Items[3] != 0){
            MenuAnimTop = 0;
            MenuAnimBottom = 0;
            MenuAnimLeft = 0;
            MenuAnimRight = -1;
            sound_play(MenuMoveSound);
        }
    }
    
    //Up
    if (keyboard_check_pressed(global.UpButton)){
        var CurrentCharacter;//The guy who's inventory we're messing with.
        CurrentCharacter = Cursor.TurnOrder[Cursor.CurrentTurn];
        
        if(CurrentCharacter.Items[1] != 0){
            MenuAnimTop = -1;
            MenuAnimBottom = 0;
            MenuAnimLeft = 0;
            MenuAnimRight = 0;
            sound_play(MenuMoveSound);
        }
    }
    
    //Down
    if (keyboard_check_pressed(global.DownButton)){
        var CurrentCharacter;//The guy who's inventory we're messing with.
        CurrentCharacter = Cursor.TurnOrder[Cursor.CurrentTurn];
        
        if(CurrentCharacter.Items[4] != 0){
            MenuAnimTop = 0;
            MenuAnimBottom = -1;
            MenuAnimLeft = 0;
            MenuAnimRight = 0;
            sound_play(MenuMoveSound);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//User8 takes calls from Target Selection Controler
//In this case, we backed out of choosing a target to 'Give' to
PanDirection = 'left'; //Pan back in
sound_play(MenuPanSound);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if we are panning out, what do we do next?
//===============
//Cancel Action==
//===============
if(PerformEvent = 'BackOut'){//Previous Menu (or go back to whatever)
    //destroy this controler and re-create the previous one
    ResetTiles();//Disable the flashing tiles
    instance_create(0,0,ItemBattleMenuControler);
    with(ItemBattleMenuControler){
        MenuAnimLeft = -1;
        sound_play(MenuPanSound);
        PanDirection = 'left';
        MenuPanX = 200;
        MenuPanY = 0;
    }
    instance_destroy();
}
//============
//Top Action==
//============
else if(PerformEvent = 'Top'){//Item 1
    GiveItemSlot = 1;
    instance_create(0,0,TargetSelectionControler);
    with(TargetSelectionControler){
        CurrentObject = GiveItemBattleMenuControler;//Remember that this controler created it
        Action = 'Give';
    }
}
//=============
//Left Action==
//=============
else if(PerformEvent = 'Left'){//Item 2
    GiveItemSlot = 2;
    instance_create(0,0,TargetSelectionControler);
    with(TargetSelectionControler){
        CurrentObject = GiveItemBattleMenuControler;//Remember that this controler created it
        Action = 'Give';
    }
}
//==============
//Right Action==
//==============
else if(PerformEvent = 'Right'){//Item 3
    GiveItemSlot = 3;
    instance_create(0,0,TargetSelectionControler);
    with(TargetSelectionControler){
        CurrentObject = GiveItemBattleMenuControler;//Remember that this controler created it
        Action = 'Give';
    }
}

//===============
//Bottom Action==
//===============
else if(PerformEvent = 'Bottom'){//Item 4
    GiveItemSlot = 4;
    instance_create(0,0,TargetSelectionControler);
    with(TargetSelectionControler){
        CurrentObject = GiveItemBattleMenuControler;//Remember that this controler created it
        Action = 'Give';
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var CurrentCharacter;//The guy who's inventory we're messing with.
CurrentCharacter = Cursor.TurnOrder[Cursor.CurrentTurn];

//Draws the menu
draw_set_font(MenuFont); 
draw_set_color(c_white);
draw_set_halign(fa_left);
draw_sprite(MenuTopVar,MenuAnimTop,view_xview+122+MenuPanX,view_yview+200+MenuPanY);
draw_sprite(MenuLeftVar,MenuAnimLeft,view_xview+106+MenuPanX,view_yview+212+MenuPanY);
draw_sprite(MenuRightVar,MenuAnimRight,view_xview+138+MenuPanX,view_yview+212+MenuPanY);
draw_sprite(MenuBottomVar,MenuAnimBottom,view_xview+122+MenuPanX,view_yview+224+MenuPanY);
draw_sprite(ItemMenuNameSprite,0,view_xview+160+MenuPanX,view_yview+200+MenuPanY);
    
if(MenuAnimTop = -1){//if we currently have the top slot selected
    draw_sprite(ItemFlashSprite,MenuAnimTop,view_xview+122+MenuPanX,view_yview+200+MenuPanY);//Flash selection over Top slot
    draw_text(view_xview + 170+MenuPanX, view_yview + 197+MenuPanY, string(Get_Item_Stats(CurrentCharacter.Items[1],'Name')));//print out name part 1
    draw_text(view_xview + 170+MenuPanX, view_yview + 205+MenuPanY, string(Get_Item_Stats(CurrentCharacter.Items[1],'Name2')));//print out name part 2
    //Is it equippped?
    if((CurrentCharacter.EquippedWeapon = 1)||(CurrentCharacter.EquippedItem = 1)){
        draw_set_color(c_orange);
        draw_text(view_xview + 170+MenuPanX, view_yview + 213+MenuPanY, 'Equipped'); //Draws 'Equipped' if the item is equipped
        draw_set_color(c_white);
    }
}
else if(MenuAnimLeft = -1){//if we currently have the left slot selected
    draw_sprite(ItemFlashSprite,MenuAnimLeft,view_xview+106+MenuPanX,view_yview+212+MenuPanY);//Flash selection over Left slot
    draw_text(view_xview + 170+MenuPanX, view_yview + 197+MenuPanY, string(Get_Item_Stats(CurrentCharacter.Items[2],'Name')));//print out name part 1
    draw_text(view_xview + 170+MenuPanX, view_yview + 205+MenuPanY, string(Get_Item_Stats(CurrentCharacter.Items[2],'Name2')));//print out name part 2
    //Is it equippped?
    if((CurrentCharacter.EquippedWeapon = 2)||(CurrentCharacter.EquippedItem = 2)){
        draw_set_color(c_orange);
        draw_text(view_xview + 170+MenuPanX, view_yview + 213+MenuPanY, 'Equipped'); //Draws 'Equipped' if the item is equipped
        draw_set_color(c_white);
    }
}
else if(MenuAnimRight = -1){//if we currently have the right slot selected
    draw_sprite(ItemFlashSprite,MenuAnimRight,view_xview+138+MenuPanX,view_yview+212+MenuPanY);//Flash selection over right slot
    draw_text(view_xview + 170+MenuPanX, view_yview + 197+MenuPanY, string(Get_Item_Stats(CurrentCharacter.Items[3],'Name')));//print out name part 1
    draw_text(view_xview + 170+MenuPanX, view_yview + 205+MenuPanY, string(Get_Item_Stats(CurrentCharacter.Items[3],'Name2')));//print out name part 2
    //Is it equippped?
    if((CurrentCharacter.EquippedWeapon = 3)||(CurrentCharacter.EquippedItem = 3)){
        draw_set_color(c_orange);
        draw_text(view_xview + 170+MenuPanX, view_yview + 213+MenuPanY, 'Equipped'); //Draws 'Equipped' if the item is equipped
        draw_set_color(c_white);
    }
}
else if(MenuAnimBottom = -1){//if we currently have the bottom slot selected
    draw_sprite(ItemFlashSprite,MenuAnimBottom,view_xview+122+MenuPanX,view_yview+224+MenuPanY);//Flash selection over bottom slot
    draw_text(view_xview + 170+MenuPanX, view_yview + 197+MenuPanY, string(Get_Item_Stats(CurrentCharacter.Items[4],'Name')));//print out name part 1
    draw_text(view_xview + 170+MenuPanX, view_yview + 205+MenuPanY, string(Get_Item_Stats(CurrentCharacter.Items[4],'Name2')));//print out name part 2
    //Is it equippped?
    if((CurrentCharacter.EquippedWeapon = 4)||(CurrentCharacter.EquippedItem = 4)){
        draw_set_color(c_orange);
        draw_text(view_xview + 170+MenuPanX, view_yview + 213+MenuPanY, 'Equipped'); //Draws 'Equipped' if the item is equipped
        draw_set_color(c_white);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
