<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>ControlerSprite</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite_index = BlankSprite;
image_speed = .125;
UpperCase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
LowerCase = "abcdefghijklmnopqrstuvwxyz";
OtherCase = "0123456789,.-!?\#'  DEL END";
//Note '#' is the default newline character. To draw it as a
//symbol, insert a '\' before it. Same rule applies for a few
//other symbols as well.

Name[0] = ' ';
Characters = 0;
_Sprite = CharacterSelectionSprite;

CurrentObject = 'none';
PanDirection = 'none';
SelectorX = 0;
SelectorY = 0;

Vpan = -100;

Pan = 200;
AllowInteraction = false;

State = 'none';
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(PanDirection != 'none'){
    if(PanDirection = 'in'){
        Pan -= 30;
        if(Pan &lt;= 0){
            Pan = 0;
            PanDirection = 'none';
            AllowInteraction = true;
        }
    }
    if(PanDirection = 'out'){
        Pan += 30;
        if(Pan &gt;= 200){
            Pan = 200;
            PanDirection = 'none';
            event_perform(ev_other,ev_user0);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Key Event Listeners
if(AllowInteraction){
    //Select
    if (keyboard_check_pressed(global.SelectButton)){
        var AsciiOffset, NewChar, Row;
        Row = SelectorY / 13;//Figure out what row we are on. (13 pixels per each row)
        
        if(Row = 0){
            //Upper Case
            AsciiOffset = SelectorX / 8; //8 is the number of pixels we move per letter. Dividing by 8 gives us the number of places we shifted.
            NewChar = chr(ord('A')+AsciiOffset);//add value to 'A' to find out what letter we selected. (A + 1 = B) ect.
        }
        else if(Row = 1){
            //Lower Case
            AsciiOffset = SelectorX / 8; //8 is the number of pixels we move per letter. Dividing by 8 gives us the number of places we shifted.
            NewChar = chr(ord('a')+AsciiOffset);//add value to 'a' to find out what letter we selected. (a + 1 = b) ect.
        }
        else if(Row = 2){//Bottom row doesnt have an easy way to automatically grab values... so... brute force it &gt;.&lt;
            AsciiOffset = SelectorX / 8; //8 is the number of pixels we move per letter. Dividing by 8 gives us the number of places we shifted.
            if(AsciiOffset &lt; 10){//first 10 spaces are numbers! (in coding, 10 goes from 0-9)
                NewChar = string(AsciiOffset);
            }
            else if(AsciiOffset = 10){//10 is comma
                NewChar = ',';
            }
            else if(AsciiOffset = 11){//11 is period
                NewChar = '.';
            }
            else if(AsciiOffset = 12){//12 is dash / minus
                NewChar = '-';
            }
            else if(AsciiOffset = 13){//13 is exclamation point
                NewChar = '!';
            }
            else if(AsciiOffset = 14){//14 is question mark
                NewChar = '?';
            }
            else if(AsciiOffset = 15){//15 is pound sign
                NewChar = '\#';//needs \ symbol to allow # to be printed. Otherwise it's treated as a newline character. 
            }
            else if(AsciiOffset = 16){//16 is apostraphe &lt;-- Probably spelled that wrong!
                NewChar = "'";
            }
            else if(AsciiOffset = 17){//17 is SPACE
                NewChar = ' ';
            }
            else if(AsciiOffset = 19){//19 is DEL
                //we delete the last character.
                //Dont worry about erasing the char value in the array.
                //The name array is temporary and is converted to a string later. 
                if(Characters != 0){//make sure we dont go into the negetives
                    Characters -= 1; 
                }
                sound_play(MenuSelectSound);
                exit;//exit before we increment characters by 1 at the end.
            }
            else if(AsciiOffset = 23){//23 is END
                //end the gizmo and continue
                sound_play(MenuSelectSound);
                sound_play(MenuPanSound);
                AllowInteraction = false;
                PanDirection = 'out';
                State = 'Done';
                //Create_New_Data();
                //room_goto_next();
                exit;
                //create new data
                //create character name
                //play menu sound
                //pan out this controler
                //return to main menu controler
            }
        }
        Name[Characters] = NewChar;
        Characters += 1;
        sound_play(MenuSelectSound);
        if(Characters = 7){//if we used all 19 letter slots, jump to "end"
            SelectorX = 184;
            SelectorY = 26;
            _Sprite = CharacterSelectionSprite2;
        }
    }
    
    //Back
    if (keyboard_check_pressed(global.BackButton)){
        if(State = 'none'){
            //Cancel character creation and go back to "New, Load, Options" menu
            sound_play(MenuPanSound);
            AllowInteraction = false;
            PanDirection = 'out';
            State = 'cancel';
        }
    }
    
    //Left
    if (keyboard_check_pressed(global.LeftButton)){
        if(Characters = 7){//if we have filled up every character slot
            SelectorX = 152;
            sound_play(MenuMoveSound);
        }
        else{
            if((SelectorY = 26)&amp;&amp;(SelectorX = 0)){//if we are on the bottom row, we must check if we move to DEL or END
                //we are on '0' the next one is 'END'
                SelectorX =184;//Move to END
                //Set cursor to bigger size
                _Sprite = CharacterSelectionSprite2;
            }
            
            else if(SelectorY = 26)&amp;&amp;(SelectorX = 152){//if we are on 'DEL' the next one is 'SPACE'
                SelectorX -=16;//Move 2 spaces to highlight SPACE
                //set cusror to smaller sprite
                _Sprite = CharacterSelectionSprite;
            }
            
            else if(SelectorY = 26)&amp;&amp;(SelectorX = 184){//else we are on END and the next letter is DEL
                SelectorX -=32;
                //set cursor to bigger size
                _Sprite = CharacterSelectionSprite2;
            }
            
            //otherwise we dont have to worry about changing size of selector
            else if(SelectorX = 0){//If we are at one end, jump to the other
                SelectorX = 200;
            }
            else{//otherwise move 1 space
                SelectorX -= 8;
            }
            sound_play(MenuMoveSound);
        }
    }
    
    //Right
    if (keyboard_check_pressed(global.RightButton)){
        if(Characters = 7){//if we have filled up every character slot
            SelectorX = 184;
            sound_play(MenuMoveSound);
        }
        else{
            if((SelectorY = 26)&amp;&amp;(SelectorX = 136)){//if we are on the bottom row, we must check if we move to DEL or END
                //we are on 'SPACE' the next one is 'DEL'
                SelectorX +=16;//Move 2 spaces to highlight DEL
                //Set cursor to bigger size
                _Sprite = CharacterSelectionSprite2;
            }
            
            else if(SelectorY = 26)&amp;&amp;(SelectorX = 152){//if we are on 'DEL' the next one is 'END'
                SelectorX +=32;//Move 2 spaces to highlight DEL
                //Set cursor to bigger size
                _Sprite = CharacterSelectionSprite2;
            }
            
            else if(SelectorY = 26)&amp;&amp;(SelectorX = 184){//else we are on END and the next letter is 0
                SelectorX = 0;
                //set cursor to smaller size
                _Sprite = CharacterSelectionSprite;
            }
            
            //otherwise we dont have to worry about changing size of selector
            else if(SelectorX = 200){//If we are at one end, jump to the other
                SelectorX = 0;
            }
            else{//otherwise move 1 space
                SelectorX += 8;
            }
            sound_play(MenuMoveSound);
        }
    }
    
    //Up
    if (keyboard_check_pressed(global.UpButton)){
        if(Characters &lt; 7){//if we havent filled up every character slot
            if((SelectorX &gt;= 144)&amp;&amp;(SelectorY = 0)){//if we are on the top row and we move onto DEL / END
                if(SelectorX &lt;176){//Jump to DEL
                    SelectorX = 152;
                }
                else{//Jump To End
                    SelectorX = 184;
                }
                //set cursor size to bigger size
                _Sprite = CharacterSelectionSprite2;
            }
            if((SelectorX &gt;= 144)&amp;&amp;(SelectorY = 26)){//if we are on the bottom row and we move off of DEL / END
                //set cursor to smaller size
                _Sprite = CharacterSelectionSprite;
            }
            
            if(SelectorY = 0){//If we are at one end, jump to the other
                SelectorY = 26;
            }
            else{//otherwise move 1 space
                SelectorY -= 13;
            }
            sound_play(MenuMoveSound);
        }
    }
    
    //Down
    if (keyboard_check_pressed(global.DownButton)){
        if(Characters &lt; 7){//if we havent filled up every character slot
            if((SelectorX &gt;= 144)&amp;&amp;(SelectorY = 13)){//if we are on the middle row and we move onto DEL / END
                if(SelectorX &lt;176){//Jump to DEL
                    SelectorX = 152;
                }
                else{//Jump To End
                    SelectorX = 184;
                }
                //set cursor size to bigger size
                _Sprite = CharacterSelectionSprite2;
            }
            if((SelectorX &gt;= 144)&amp;&amp;(SelectorY = 26)){//if we are on the bottom row and we move off of DEL / END
                //set cursor size to smaller size
                _Sprite = CharacterSelectionSprite;
            }
            
            if(SelectorY = 26){//If we are at one end, jump to the other
                SelectorY = 0;
            }
            else{//otherwise move 1 space
                SelectorY += 13;
            }
            sound_play(MenuMoveSound);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(State = 'cancel'){
    //we panned out the controler, now we delete it and call the other object's function
    with(CurrentObject){
    CharacterCreationAction = "BackingOut";
        event_perform(ev_other,ev_user13);//change to something else
    }
    instance_destroy();//destroy this controler.
}
else if(State = 'Done'){
    //Create the character and call other object's 13
    var HeroName; 
    Create_New_Data()
    if (Characters = 0){//Use default Hero Name
        HeroName = "IAN";
    }
    else{
        HeroName = "";
        for(i = 0; i &lt; Characters; i+=1){
            HeroName += Name[i];
        }
    }
    global.Name[1] = HeroName;
    //we panned out the controler, now we delete it and call the other object's function
    with(CurrentObject){
        CharacterCreationAction = "StartingNew";
        event_perform(ev_other,ev_user13);//change to something else
    }
    instance_destroy();//destroy this controler.
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(DialogueWindow,0,view_xview+10,view_yview+194+Vpan+Pan);//Draws Dialogue window to hold letters ect
draw_sprite(Get_Portrait(1),0,view_xview+10-Pan,view_yview+116+Vpan-Pan);//Draw Character's Portrait
draw_sprite(NameWindowSprite,0,view_xview+72+Pan,view_yview+116+52+Vpan-Pan);//Draws Name Window
draw_set_font(MenuFont);//Set Font
draw_set_color(c_white);//Set Font Color
draw_text(view_xview+25,view_yview+194+Vpan+Pan,UpperCase);//Draw all 'upper case' characters
draw_text(view_xview+25,view_yview+207+Vpan+Pan,LowerCase);//Draw all 'lower case' characters
draw_text(view_xview+25,view_yview+220+Vpan+Pan,OtherCase);//Draw all 'other' characters (numbers, !-?# END DEL...ect)
draw_sprite(_Sprite,-1,view_xview+22+SelectorX,view_yview+203+SelectorY+Vpan+Pan);

//draws the current name of the character
var Temp;
for (Temp = 0; Temp &lt; Characters; Temp += 1){
draw_text(view_xview+75+8+(8*Temp)+Pan,view_yview+116+52-2+Vpan-Pan,Name[Temp]);
}

//Draws 'empty' lines everywhere else
var Line;
for (Line = 0; Line &lt; 7; Line += 1){
if (Characters &lt;= Line){
draw_line_width(view_xview+75+8 +(8*Line)+Pan,view_yview+166+Vpan+14+4-Pan,view_xview+75+8+7 +(8*Line)+Pan,view_yview+166+Vpan+14+4-Pan,1);
}
}

//Draw the flashing red bar on the current character spot
if(Characters &lt; 7){//Only draw flashing bar if we havent used up all slots
draw_sprite(CurrentCharacterSprite, -1, view_xview+75+8+(8*Characters)+Pan,view_yview+166+Vpan+18-Pan);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
