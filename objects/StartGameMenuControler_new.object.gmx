<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
State = 0;
MainMenuState = 'none';
LoadMenuState = 'none';
NewMenuState = 'none';
ActionPerformed = 'none';

SaveSlotsPanDirection = 'none';
SaveSlotsPan = -300;


//sound_play(NewGameSound);
MainMenuPan = -300;
MainMenuPanDirection = 'none';
MainMenuCursorPlace = 0;
//event_perform(ev_other, ev_user15);
SavePanAction = false;
MainPanAction = false;
CharacterCreationAction = 'none';

SaveSlotsCursorPlace = 0;


AllowInteraction = false; // global (can interact with this object) variable
AllowLoad = false;


//SaveSlot1 = 'LongestCharNameTest LV99';
SaveSlot[0] = 'EMPTY';
SaveSlot[1] = 'EMPTY';
SaveSlot[2] = 'EMPTY';
SaveSlot[3] = 'EMPTY';
SaveSlot[0] = "EMPTY";
CreateScreenFade(c_black,1,0,.1,'in',StartGameMenuControler);//Fade in room
//SaveSlot[1] = "CharName LV2";
//SaveSlot[2] = "CharName LV3";
//SaveSlot[3] = "CharName LV4";
/*
if(file_exists(SyroGS1.ini)){
ini_open(SyroGS1.ini);
SaveSlot1 = string(ini_read_string("Character 1","Name", "Jason") + " LV" + string(ini_read_real("Character 1","Level", 1)));
ini_close();
}
if(file_exists(SyroGS2.ini)){
ini_open(SyroGS2.ini);
SaveSlot2 = string(ini_read_string("Character 1","Name", "Jason") + " LV" + string(ini_read_real("Character 1","Level", 1)));
ini_close();
}
if(file_exists(SyroGS3.ini)){
ini_open(SyroGS3.ini);
SaveSlot3 = string(ini_read_string("Character 1","Name", "Jason") + " LV" + string(ini_read_real("Character 1","Level", 1)));
ini_close();
}
if(file_exists(SyroGS4.ini)){
ini_open(SyroGS4.ini);
SaveSlot4 = string(ini_read_string("Character 1","Name", "Jason") + " LV" + string(ini_read_real("Character 1","Level", 1)));
ini_close();
}
*/

//if((SaveSlot[0] = "EMPTY")&amp;&amp;(SaveSlot[1] = "EMPTY")&amp;&amp;(SaveSlot[2] = "EMPTY")&amp;&amp;(SaveSlot[3] = "EMPTY")){
//AllowLoad = false;
//}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Main Menu Pan Stuff
if(MainMenuPanDirection != 'none'){
    //pan in
    if(MainMenuPanDirection = 'in'){
        MainMenuPan += 30;
        if(MainMenuPan &gt;= 0){
            MainMenuPan = 0;
            MainMenuPanDirection = 'none';
            AllowInteraction = true;
        }
    }
    //pan out
    if(MainMenuPanDirection = 'out'){
        MainMenuPan -= 30;
        if(MainMenuPan &lt;= -300){
            MainMenuPan = -300;
            MainMenuPanDirection = 'none';
            if(MainPanAction){
                event_perform(ev_other,ev_user0);//clicked on something, figure out what and act accordingly
            }
        }
    }
}

//Save Data Pan Stuff
if(SaveSlotsPanDirection != 'none'){
    //pan in
    if(SaveSlotsPanDirection = 'in'){
        SaveSlotsPan += 30;
        if(SaveSlotsPan &gt;= 0){
            SaveSlotsPan = 0;
            SaveSlotsPanDirection = 'none';
            AllowInteraction = true;
        }
    }
    //pan out
    if(SaveSlotsPanDirection = 'out'){
        SaveSlotsPan -= 30;
        if(SaveSlotsPan &lt;= -300){
            SaveSlotsPan = -300;
            SaveSlotsPanDirection = 'none';
            if(SavePanAction){
                event_perform(ev_other,ev_user0);//clicked on something, figure out what and act accordingly
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Key Event Listeners
if(AllowInteraction){
    //Select
    if (keyboard_check_pressed(global.SelectButton)){
        if(MainMenuState = 'Active'){
            //Figure out what we just clicked on
            if(MainMenuCursorPlace = 0){ //New Game
                //Choose a save slot
                AllowInteraction = false;
                MainMenuState = 'Inactive';
                State = 100;
                event_perform(ev_other,ev_user15);
            }
            else if(MainMenuCursorPlace = 1){ //Load Game
                //Print out "Load Which Game?" and pan in games to load.
                AllowInteraction = false;
                MainMenuState = 'Inactive';
                State = 200;
                //"search for save slot" so you dont start on an empty slot.
                for(i = 0; i &lt;= 3; i+=1){//while we dont have a valid slot to move to, try the next
                    if(SaveSlot[i] != "EMPTY"){//if we found a valid save,
                        SaveSlotsCursorPlace = i;//Move cursor to that spot.
                        break; // break out of the loop
                    }
                }
                event_perform(ev_other,ev_user15);
            }
            else if(MainMenuCursorPlace = 2){ //Options
                AllowInteraction = false;
                sound_play(MenuPanSound);
                instance_create(0,0,SetControlsObject);
                SetControlsObject.CurrentObject = self.id;
            }
        }
        else if(LoadMenuState = 'Active'){
            //Alright cool! Let's continue the story!
            //Fade to black and transition to room
            //AllowInteraction = false;
        }
        else if(NewMenuState = 'Active'){
            //If we selected an empty slot,
            //Pan out and display "what's the Hero's name of this tale?"
            if (SaveSlot[SaveSlotsCursorPlace] = 'EMPTY'){
                AllowInteraction = false;
                ActionPerformed = 'SelectedEmptySlot';
                SavePanAction = false;
                MainPanAction = true;
                MainMenuPanDirection = 'out';
                SaveSlotsPanDirection = 'out';
                sound_play(MenuPanSound);
                //Remember Save Slot as global variable!
            }
            //If Existing slot,
            //Bring in Y/N menu, "Are you sure you want to delete this save?"
        }
    }
    
    //Back
    if (keyboard_check_pressed(global.BackButton)){
        if(LoadMenuState = 'Active'){//If we are canceling the loading of a game
            //pan saves out
            //display "Change your mind?"
            //allow ability to select from the start menu again.
            SavePanAction = true;
            SaveSlotsPanDirection = 'out';
            AllowInteraction = false;
            ActionPerformed = 'BackedOutOfSavesMenu';
            sound_play(MenuPanSound);
        }
        else if(NewMenuState = 'Active'){//If we are canceling the loading of a game
            //pan saves out
            //display "Change your mind?"
            //allow ability to select from the start menu again.
            SavePanAction = true;
            SaveSlotsPanDirection = 'out';
            AllowInteraction = false;
            ActionPerformed = 'BackedOutOfSavesMenu';
            sound_play(MenuPanSound);
        }
    }
    
    //Up
    if (keyboard_check_pressed(global.UpButton)){
        if (MainMenuState = 'Active'){
            if (MainMenuCursorPlace != 0){//If we are not on the top slot, we play the move sound.
                sound_play(MenuMoveSound);
            }
            if((MainMenuCursorPlace = 2)&amp;&amp;(AllowLoad)){//If we are on the last slot, check if we go to load or new
                //if we can select "Load Game"
                MainMenuCursorPlace = 1;
            }
            else{//Otherwise we have no save games so the option is not there. 
                MainMenuCursorPlace = 0;
            }
        }
        else if(LoadMenuState = 'Active'){//loading game, only allow selection of valid slots
            for(i = SaveSlotsCursorPlace; i &gt;= 1; i-=1){//while we dont have a valid slot to move to, try the next
                if(SaveSlot[i-1] != "EMPTY"){//if we can move up, do it
                    SaveSlotsCursorPlace =i-1;
                    sound_play(MenuMoveSound);
                    break; // break out of the loop
                }
            }
        }
        else if(NewMenuState = 'Active'){//we're starting a new game, allow selection of any slot
            if(SaveSlotsCursorPlace != 0){//if we arent on the top already, move up 1 slot.
                SaveSlotsCursorPlace -= 1;
                sound_play(MenuMoveSound);
            }
        }
    }
    
    //Down
    if (keyboard_check_pressed(global.DownButton)){
        if (MainMenuState = 'Active'){
            if (MainMenuCursorPlace != 2){//If we are not on the bottom slot, we play the move sound.
                sound_play(MenuMoveSound);
            }
            if((MainMenuCursorPlace = 0)&amp;&amp;(AllowLoad)){//If we are on the first slot, check if we go to load or options
                //if we can select "Load Game"
                MainMenuCursorPlace = 1;
            }
            else{//Otherwise we have no save games so the option is not there. 
                MainMenuCursorPlace = 2;
            }
        }
        else if(LoadMenuState = 'Active'){
            //loading game, only allow selection of valid slots
            for(i = SaveSlotsCursorPlace; i &lt;= 2; i+=1){//while we dont have a valid slot to move to, try the next
                if(SaveSlot[i+1] != "EMPTY"){//if we can move up, do it
                    SaveSlotsCursorPlace =i+1;
                    sound_play(MenuMoveSound);
                    break; // break out of the loop
                }
            }
        
        }
        else if(NewMenuState = 'Active'){//we're starting a new game, allow selection of any slot
            if(SaveSlotsCursorPlace != 3){//if we arent on the top already, move up 1 slot.
                SaveSlotsCursorPlace += 1;
                sound_play(MenuMoveSound);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Sample Cutscene using only dialogue.
//Hey! dont forget to add a "skip" option to the opening dialogue which bypasses this crap and heads right into the menu!
/*
if(State = 0){
    CreateDialogueBasic(0,0,"Welcome to the Syro Library.#Can I help you find something?", StartGameMenuControler,true);
    State +=1;
}
else if(State = 1){
    StartNewDialogueBasic("Oh!@ You're interested in the#Legend's of Syro?@@ ",false);
    State +=1;
}
else if(State = 2){//@1
    DelayDialogue(20);
    State +=1;
}
else if(State = 3){//@2
    DelayDialogue(30);
    State +=1;
}
else if(State = 4){//@3
    StartNewDialogueBasic("They're my favorite stories!@#Here!@ ",false);
    State +=1;
}
else if(State = 5){
    DelayDialogue(10);
    State +=1;
}
else if(State = 6){
    DisableDialogueBasic(false);
    PanOutDialogueBasic();
}*/

//================================================
//This stuff displays before the menu is shown.===
//================================================
if(State = 0){
    if(keyboard_check(vk_space)){//shortcut to skip the intro crap
        CreateDialogueBasic(0,0,"I can tell just how pumped you#are so here's the menu to get #started!@ ",StartGameMenuControler,false);
        State = 5;
    }
    else{
        //CreateDialogueBasic(0,0,"Welcome to the Alpha Demo!#The changelog is huge this time #around!", StartGameMenuControler,true);
        //State +=1;
        CreateDialogueBasic(0,0,WordWrap('Insert witty Alpha 1.2 message here^.^.^. ^Good Luck!@ ',200,'#',false), StartGameMenuControler,true);
        State = 5;
    }
}/*
else if(State = 1){
    sound_play(MenuSelectSound); //Ding!
    StartNewDialogueBasic("But,@#you probably knew that already#considering how long it took#for this demo to come out.",true);
    State +=1;
}
else if(State = 2){
    DelayDialogue(20);
    State +=1;
}
else if(State = 3){
    sound_play(MenuSelectSound); //Ding!
    AppendDialogueBasic("#Nonetheless you finaly get to#play it!@#I can tell just how pumped you#are so here's the menu to get #started!@ ",false);
    State +=1;
}
else if(State = 4){
    DelayDialogue(20);
    State +=1;
}*/
else if(State = 5){
    DisableDialogueBasic(false);
    //Pan in Menu
    MainMenuState = 'Active';
    MainMenuPanDirection = 'in';
    sound_play(MenuPanSound);
    State +=1;
}

//===========================
//After selecting new game===
//===========================
else if(State = 100){
    StartNewDialogueBasic("Select a save slot.@ ",false);
    State +=1;
}
else if(State = 101){
    //flag off dialogue (really this is redundant since it's alread off, but it's good practice to failsafe your code) :D
    DisableDialogueBasic(false);
    State +=1;
    sound_play(MenuPanSound);
    SaveSlotsPanDirection = 'in';
    NewMenuState = 'Active';
}
//===============================================
//If we backed out of selecting a new game slot==
//===============================================
else if(State = 150){
    StartNewDialogueBasic("Change your mind?@ ",false);
    State +=1;
}
else if(State = 151){
    //flag off dialogue (really this is redundant since it's alread off, but it's here for failsafe reasons)
    DisableDialogueBasic(false);
    State +=1;
    MainMenuState = 'Active';
    NewMenuState = 'none'; //Disable new menu so it is no longer drawn.
    SaveSlotsCursorPlace = 0;//Reset the Cursor's place
    AllowInteraction = true;
}
//===========================
//After selecting load game==
//===========================
else if(State = 200){
    StartNewDialogueBasic("Which game do you want to#load?@ ",false);
    State +=1;
}
else if(State = 201){
    //flag off dialogue (really this is redundant since it's alread off, but it's good practice to failsafe your code) :D
    DisableDialogueBasic(false);
    State +=1;
    sound_play(MenuPanSound);
    SaveSlotsPanDirection = 'in';
    LoadMenuState = 'Active';
}
//==============================================
//If we backed out of selecting a game to load==
//==============================================
else if(State = 250){
    StartNewDialogueBasic("Change your mind?@ ",false);
    State +=1;
}
else if(State = 251){
    //flag off dialogue (really this is redundant since it's alread off, but it's here for failsafe reasons)
    DisableDialogueBasic(false);
    State +=1;
    MainMenuState = 'Active';
    LoadMenuState = 'none'; //Disable load menu so it is no longer drawn.
    SaveSlotsCursorPlace = 0;//Reset the Cursor's place
    AllowInteraction = true;
}
//==========================
//After selecting options===
//==========================
else if(State = 300){
    StartNewDialogueBasic("Sorry!@ This option isn't#coded yet!@ ",false);
    State +=1;
}
else if(State = 301){
    DelayDialogue(20);
    State +=1;
}
else if(State = 302){
    //flag off dialogue (really this is redundant since it's alread off, but it's here for failsafe reasons)
    DisableDialogueBasic(false);
    State +=1;
    MainMenuState = 'Active';
    AllowInteraction = true;
}
//=========================================
//If we selected an empty slot (new game)==
//=========================================
else if(State = 400){
    MainMenuState = 'none';//Stop these from being drawn.
    NewMenuState = 'none';
    StartNewDialogueBasic("What's the Hero's name#of this tale?@ ",false);
    State +=1;
}
else if(State = 401){
    DisableDialogueBasic(false);
    State +=1;
    sound_play(MenuPanSound);
    //Set up character creation controler
    instance_create(0,0,CharacterCreationControler);
    with(CharacterCreationControler){
        PanDirection = 'in';
        CurrentObject = StartGameMenuControler;//remember what object created it in case (back) is pressed
    }
}
//===============================
//Canceling starting a new game==
//===============================
else if(State = 450){
    StartNewDialogueBasic("Change your mind?@ ",false);
    State +=1;
}
else if(State = 451){
    DisableDialogueBasic(false);
    MainMenuState = 'Active';
    MainMenuPanDirection = 'in';
}
//========================
//We created a character==
//========================
else if(State = 500){
    StartNewDialogueBasic(string(WordWrap(global.Name[1] + '?@ Nice name!',200,'#',false)),true);
    EnableDialogueBasic(true);//Allow us to interact with the dialogue controler.
    State +=1;
}
else if(State = 501){
    DelayDialogue(20);
    State +=1;
}
else if(State = 502){
    sound_play(MenuSelectSound); //Ding!
    AppendDialogueBasic("#Now let's start the adventure!",false);
    State +=1;
}
else if(State = 503){
    DisableDialogueBasic(false);
    //Fade screen to black //Argument Reference: Color, Alpha, Stop, Speed, Direction, Current Object
    CreateScreenFade(c_black,0,1,.04,'out',StartGameMenuControler);
    State +=1;
}








</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="23">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//user13 is for calls from the Character creation object

if(CharacterCreationAction = "BackingOut"){
    //Display "Change your mind?"
    //Pan in main menu
    State = 450;
    event_perform(ev_other,ev_user15);
}
else if(CharacterCreationAction = "StartingNew"){
    //Display @playername@? Nice name!
    State = 500;
    event_perform(ev_other,ev_user15);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(State = 0){
    with(ScreenFadeControler){
        instance_destroy();
    }
    event_perform(ev_other,ev_user15);
}
else{
//Screen has faded out
//transition to next room
sound_stop(TitleScreenOST);
room_goto_next();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(ActionPerformed = 'BackedOutOfSavesMenu'){
    if(LoadMenuState = 'Active'){
        //print out "Change your Mind?"
        SavePanAction = false;
        State = 250;
        event_perform(ev_other,ev_user15);
    }
    else if(NewMenuState = 'Active'){
        //print out "Change your Mind?"
        SavePanAction = false;
        State = 150;
        event_perform(ev_other,ev_user15);
    }

}
else if(ActionPerformed = 'SelectedEmptySlot'){
//Print out dialogue
//What's the Hero's name of this tale?
MainPanAction = false;
State = 400;
event_perform(ev_other,ev_user15);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_white);
//draw_sprite(sprite_index, image_index, x, y ); //draws the main object sprite
//draw_sprite(CandleSprite,image_index,view_xview + 65, view_yview + 72);

//============================================
//If we have to display the main menu system==
//============================================
if((MainMenuState = 'Active')||(MainMenuState = 'Inactive')){
    draw_sprite(NewGameMenu,0,view_xview + 10 + MainMenuPan, view_yview + 20); // draws the dialogue window
    draw_set_font(MenuFont); 
    draw_text(view_xview + 20 + MainMenuPan, view_yview + 19,"New Game");
    if(!AllowLoad){//if there are no games that can be loaded
        draw_set_color(c_dkgray);//grey out "Load Game"
    }
    draw_text(view_xview + 20 + MainMenuPan, view_yview + 34,"Load Game");
    draw_set_color(c_white);
    draw_text(view_xview + 20 + MainMenuPan, view_yview + 49,"Options");
    
    draw_sprite(SelectSprite,0,view_xview + 105+MainMenuPan, view_yview + 30 + (15*MainMenuCursorPlace));
}

//=======================================================================================
//If we are displaying the save slots (starting a new game or loading an existing one)===
//=======================================================================================
if((LoadMenuState = 'Active') || (NewMenuState = 'Active')||(LoadMenuState = 'Inactive') || (NewMenuState = 'Inactive')){

    draw_set_font(MenuFont); 
    draw_sprite(DialogueWindow,0,view_xview + 10+SaveSlotsPan,view_yview + 61+20);
    draw_sprite(SelectSprite,0,view_xview + 230+SaveSlotsPan, view_yview + 60+30 + (10*SaveSlotsCursorPlace));
    
    //Draw the save slots in the correct color (white if it exists, grey if it doesnt)
    if((SaveSlot[0] = 'EMPTY')&amp;&amp;(LoadMenuState = 'Active')){
        draw_set_color(c_dkgray);
    }
    else{
        draw_set_color(c_white);
    }
    draw_text(view_xview + 22+SaveSlotsPan,view_yview + 61+20-2,SaveSlot[0]); //Slot 1
    if((SaveSlot[1] = 'EMPTY')&amp;&amp;(LoadMenuState = 'Active')){
        draw_set_color(c_dkgray);
    }
    else{
        draw_set_color(c_white);
    }
    draw_text(view_xview + 22+SaveSlotsPan,view_yview + 61+20+10-2,SaveSlot[1]); //Slot 2
    if((SaveSlot[2] = 'EMPTY')&amp;&amp;(LoadMenuState = 'Active')){
        draw_set_color(c_dkgray);
    }
    else{
        draw_set_color(c_white);
    }
    draw_text(view_xview + 22+SaveSlotsPan,view_yview + 61+20+20-2,SaveSlot[2]); //Slot 3
    if((SaveSlot[3] = 'EMPTY')&amp;&amp;(LoadMenuState = 'Active')){
        draw_set_color(c_dkgray);
    }
    else{
        draw_set_color(c_white);
    }
    draw_text(view_xview + 22+SaveSlotsPan,view_yview + 61+20+30-2,SaveSlot[3]); //Slot 4
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
