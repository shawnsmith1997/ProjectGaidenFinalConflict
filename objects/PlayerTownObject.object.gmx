<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>ChaosDown</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-50</depth>
  <persistent>0</persistent>
  <parentName>PlayerBlockParent</parentName>
  <maskName>OverworldCharacterMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>AllowInteraction = true;
// Variables to assist actual grid movement
gridSize = 24;    // Set as power of 2 (1,2,4,8,16,32...)
isMoving = false; // True when player walking on grid
moveTimer = 0;    // Set to gridSize when move start
moveSpeed = 2.4;    // Set as Power of 24
speedX = 0;       // horizontal walking speed
speedY = 0;       // vertical walking speed
Rotation = 0;
direction = 270;

// Helpful for setting state after moving
justStoppedMoving = true;
image_speed = .0625;//idle speed

xProjected = x;
yProjected = y;

DialogueState = 0;//for chatting with npc's

//For cutscenes
CutsceneMode = false;
MovementState = 0;
MovementScriptID = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>333</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_save_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>2</kind>
            <string>savegame</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if &amp;&amp;(AllowInteraction){// Set standing animations if just stopped
if(!CutsceneMode){//not cutscene, play normal animations
    if (justStoppedMoving){
        justStoppedMoving = false;
        image_speed = .0625;//idle speed
    }
        
    //When not moving, check to see if a direction key is held.
    if ((!isMoving)&amp;&amp;(AllowInteraction)){        
        // Perform 4 direction keyboard and grid checks
        // for setting appropriate movement and animation
        if (keyboard_check(global.RightButton)){
            direction = 0; 
            if((place_free(x+24,y))&amp;&amp;((x+gridSize) &lt; room_width)){
                isMoving = true;      // Lets start moving
                moveTimer = gridSize; // Ready moveTimer for countdown
                speedX = moveSpeed;   // Set horizontal speed
                speedY = 0;           // Set vertical speed
                xProjected = x+24;
                yProjected = y;
            }
        }
        else if (keyboard_check(global.UpButton)){
            direction = 90;
            if((place_free(x,y-24))&amp;&amp;((y-gridSize) &gt;= 0)){
                isMoving = true;
                moveTimer = gridSize;
                speedX = 0;
                speedY = -moveSpeed;
                xProjected = x;
                yProjected = y-24;
            }
        }
        else if (keyboard_check(global.LeftButton)){
            direction = 180;
            if((place_free(x-24,y))&amp;&amp;((x-gridSize) &gt;= 0)){
                isMoving = true;
                moveTimer = gridSize;
                speedX = -moveSpeed;
                speedY = 0;
                xProjected = x-24;
                yProjected = y;
            } 
        }
        else
        if (keyboard_check(global.DownButton)){
            direction = 270;
            if((place_free(x,y+24))&amp;&amp;((y+gridSize) &lt; room_height)){
                isMoving = true;
                moveTimer = gridSize;
                speedX = 0;
                speedY = moveSpeed;
                xProjected = x;
                yProjected = y+24;
            }
        }
    }
    
    // When player is moving on grid...
    if (isMoving){
        image_speed = .125;//walking speed
        x += speedX; // update our x/y positions
        y += speedY;
        moveTimer -= moveSpeed; // countdown moveTimer until 0, then stop moving
        if (moveTimer &lt;= 0){
            isMoving = false;
            justStoppedMoving = true;
            speedX = 0;
            speedY = 0;
            x=round(x);//Fix any floating point errors (needed for precise collision detection)
            y=round(y);
            image_speed = .0625;
            with(FollowerCharacterObject){
                if(Position = 1){
                    xProjected = PlayerTownObject.x;
                    yProjected = PlayerTownObject.y;
                }
            }
        }
        else if(moveTimer = (gridSize/10)*5){//fire off the move event for the next character in the chain
            //var ParentX, ParentY;
            //ParentX = xProjected;
            //ParentY = yProjected;
            with(FollowerCharacterObject){
                if(Position = 1){
                    if(Find_Radius_Distance(_Parent.x,_Parent.y,x,y)&gt;1){
                        event_perform(ev_other,ev_user0);
                    }
                }
            }
        }
    }
}

else if(CutsceneMode){//overwrite controls for cutscene
    if(isMoving){
        //image_speed = .125;//walking speed
        x += speedX; // update our x/y positions
        y += speedY;
        moveTimer -= moveSpeed; // countdown moveTimer until 0, then stop moving
        if (moveTimer &lt;= 0){
            isMoving = false;
            justStoppedMoving = true;
            speedX = 0;
            speedY = 0;
            x=round(x);//Fix any floating point errors (needed for precise collision detection)
            y=round(y);
            GlobalMovementScript(MovementScriptID,self.id);
        }
    }
}



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Key Event Listeners
//Select
if (keyboard_check_pressed(global.SelectButton)){
        //Summon the menu controler
    if((!isMoving)&amp;&amp;(AllowInteraction)){
        //First see if there is a chest / npc where we are facing.
        if((direction = 0)&amp;&amp;(instance_position(x+24,y,InteractableParentObject)!= noone)){//right
            AllowInteraction = false;
            with(instance_position(x+24,y,InteractableParentObject)){
                event_perform(ev_other,ev_user0);
            }
        }
        else if((direction = 90)&amp;&amp;(instance_position(x,y-24,InteractableParentObject)!= noone)){//up
            AllowInteraction = false;
            with(instance_position(x,y-24,InteractableParentObject)){
                event_perform(ev_other,ev_user0);
            }
        }
        else if((direction = 180)&amp;&amp;(instance_position(x-24,y,InteractableParentObject)!= noone)){//left
            AllowInteraction = false;
            with(instance_position(x-24,y,InteractableParentObject)){
                event_perform(ev_other,ev_user0);
            }
        }
        else if((direction = 270)&amp;&amp;(instance_position(x,y+24,InteractableParentObject)!= noone)){//down
            AllowInteraction = false;
            with(instance_position(x,y+24,InteractableParentObject)){
                event_perform(ev_other,ev_user0);
            }
        }
        //if not, then bring up the menu.
        else{
            AllowInteraction = false;
            instance_create(0,0,MainTownMenuControler);
            with(MainTownMenuControler){
                sound_play(MenuPanSound);
                MenuPanY = 100//Start at the bottom.
                PanDirection = 'up';
                MenuAnimTop = -1;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//calls from character animation controler
GlobalMovementScript(MovementScriptID,self.id);//back to cutscene stuff
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if(!Casting){
    //sprite_index = Get_Character_Sprite(1,direction);
//}
sprite_index = Get_Character_Sprite(1,direction);
if(Rotation = 0){
    draw_sprite(sprite_index,image_index,round(x), round(y));
}
else if(Rotation = 90){
    draw_sprite_ext(sprite_index,image_index,round(x), round(y)+24,1,1,Rotation,c_white,1);
}
else if(Rotation = 180){
    draw_sprite_ext(sprite_index,image_index,round(x)+24, round(y)+24,1,1,Rotation,c_white,1);
}
else if(Rotation = 270){
    draw_sprite_ext(sprite_index,image_index,round(x)+24, round(y),1,1,Rotation,c_white,1);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
