<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>PanDirection = 'none';
Pan = -150;
PerformEvent = 'none';
State = 'none';
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(objPlayer){
    SaveStats(self);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(PanDirection = 'in'){
    Pan += 25;
    if(Pan &gt;= 0){
        Pan = 0;
        PanDirection = 'none';
        event_perform(ev_other,ev_user0);
    }
}
    
else if(PanDirection = 'out'){
    Pan -= 25;
    if(Pan &lt;= -150){
        Pan = -150;
        PanDirection = 'none';
        ySpeed = 18;
        yStop  = 100;
        event_perform(ev_other,ev_user1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(State = 'Weapons'){//End equip weapons
    with(WeaponEquipBattleMenuControler){
        if(PerformEvent = 'Selected Item'){//We need to create the item menu controler
            instance_create(0,0,ItemBattleMenuControler);
            with(ItemBattleMenuControler){
                MenuAnimRight = -1;
                sound_play(MenuPanSound);
                PanDirection = 'left';
                MenuPanX = 200;
                MenuPanY = 0;
            }
            instance_destroy();
        }
        else{//Canceling out completely
            sound_play(MenuPanSound);
            PerformEvent = 'BackOut';
            AllowInteraction = false;
            PanDirection = 'down';
        }
    }
    instance_destroy();
}
else if(State = 'Items'){//End equip weapons
    with(ItemEquipBattleMenuControler){
        if(PerformEvent = 'Selected Item'){//We need to create the item menu controler
            instance_create(0,0,ItemBattleMenuControler);
            with(ItemBattleMenuControler){
                MenuAnimRight = -1;
                sound_play(MenuPanSound);
                PanDirection = 'left';
                MenuPanX = 200;
                MenuPanY = 0;
            }
            instance_destroy();
        }
        else{//Canceling out completely
            sound_play(MenuPanSound);
            PerformEvent = 'BackOut';
            AllowInteraction = false;
            PanDirection = 'down';
        }
    }
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Allow the Weapons / Items equip controlers to be interacted with
CurrentObject.AllowInteraction = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var CurrentCharacter;//The guy who's inventory we're messing with.
CurrentCharacter = Cursor.TurnOrder[Cursor.CurrentTurn];

//Draw the base of the Item equip window.
draw_sprite(ItemEquipWindow,0,view_xview+10+Pan,view_yview+176);
draw_text(view_xview + 20+Pan, view_yview + 174, 'ATT');
draw_text(view_xview + 20+Pan, view_yview + 188, 'DEF');
draw_text(view_xview + 20+Pan, view_yview + 202, 'AGI');
draw_text(view_xview + 20+Pan, view_yview + 216, 'MOV');

if(State = 'Weapons'){//Display Base stat + selected weapon stat + equipped item stat
    draw_text(view_xview + 20+32+Pan, view_yview + 174, string(CurrentCharacter.Attack + Get_Item_Stats(CurrentCharacter.Items[WeaponEquipBattleMenuControler.EquippableWeapons[WeaponEquipBattleMenuControler.SelectedItem]], 'Attack') + Get_Item_Stats(CurrentCharacter.Items[CurrentCharacter.EquippedItem], 'Attack')));
    draw_text(view_xview + 20+32+Pan, view_yview + 188, string(CurrentCharacter.Defense + Get_Item_Stats(CurrentCharacter.Items[WeaponEquipBattleMenuControler.EquippableWeapons[WeaponEquipBattleMenuControler.SelectedItem]], 'Defense') + Get_Item_Stats(CurrentCharacter.Items[CurrentCharacter.EquippedItem], 'Defense')));
    draw_text(view_xview + 20+32+Pan, view_yview + 202, string(CurrentCharacter.Agility + Get_Item_Stats(CurrentCharacter.Items[WeaponEquipBattleMenuControler.EquippableWeapons[WeaponEquipBattleMenuControler.SelectedItem]], 'Agility') + Get_Item_Stats(CurrentCharacter.Items[CurrentCharacter.EquippedItem], 'Agility')));
    draw_text(view_xview + 20+32+Pan, view_yview + 216, string(CurrentCharacter.MoveRange + Get_Item_Stats(CurrentCharacter.Items[WeaponEquipBattleMenuControler.EquippableWeapons[WeaponEquipBattleMenuControler.SelectedItem]], 'MoveRange') + Get_Item_Stats(CurrentCharacter.Items[CurrentCharacter.EquippedItem], 'MoveRange')));
}
else if(State = 'Items'){//Display Base stat + selected weapon stat + equipped item stat
    draw_text(view_xview + 20+32+Pan, view_yview + 174, string(CurrentCharacter.Attack + Get_Item_Stats(CurrentCharacter.Items[ItemEquipBattleMenuControler.EquippableItems[ItemEquipBattleMenuControler.SelectedItem]], 'Attack') + Get_Item_Stats(CurrentCharacter.Items[CurrentCharacter.EquippedWeapon], 'Attack')));
    draw_text(view_xview + 20+32+Pan, view_yview + 188, string(CurrentCharacter.Defense + Get_Item_Stats(CurrentCharacter.Items[ItemEquipBattleMenuControler.EquippableItems[ItemEquipBattleMenuControler.SelectedItem]], 'Defense') + Get_Item_Stats(CurrentCharacter.Items[CurrentCharacter.EquippedWeapon], 'Defense')));
    draw_text(view_xview + 20+32+Pan, view_yview + 202, string(CurrentCharacter.Agility + Get_Item_Stats(CurrentCharacter.Items[ItemEquipBattleMenuControler.EquippableItems[ItemEquipBattleMenuControler.SelectedItem]], 'Agility') + Get_Item_Stats(CurrentCharacter.Items[CurrentCharacter.EquippedWeapon], 'Agility')));
    draw_text(view_xview + 20+32+Pan, view_yview + 216, string(CurrentCharacter.MoveRange + Get_Item_Stats(CurrentCharacter.Items[ItemEquipBattleMenuControler.EquippableItems[ItemEquipBattleMenuControler.SelectedItem]], 'MoveRange') + Get_Item_Stats(CurrentCharacter.Items[CurrentCharacter.EquippedWeapon], 'MoveRange')));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
