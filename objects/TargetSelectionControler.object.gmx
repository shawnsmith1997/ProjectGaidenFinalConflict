<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Cursor becomes visible and current target is set to the first position
Cursor.visible = true;
Cursor.CurrentTarget = 0; 

AllowInteraction = false;
PanDirection = 'none';
PanX = 200;
Action = 'none';

IncrementDirection = 1;//Needed to know what way to increment the list
CurrentObject = 0;

//Start the controler in motion!
ActionToPerform = 'FindTarget';
event_perform(ev_other,ev_user3);//Faces character in direction of target
event_perform(ev_other,ev_user0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//For HUD Panning
if(PanDirection != "none"){
    /*===================*/
    /*Slide Battle HUD in*/
    /*===================*/
    
    if(PanDirection = 'in'){//Slide Battle HUD in
        if(PanX &gt; 0){
            PanX -= 45;
            if(PanX &lt;= 0){
                PanX = 0;
                PanDirection = 'none';
                AllowInteraction = true;
            }
        }
    }
    
    /*====================*/
    /*Slide Battle HUD out*/
    /*====================*/
    if(PanDirection = 'out'){//Slide Battle HUD out
        if(PanX &lt; 200){
            PanX += 45;
            if(PanX &gt;= 200){
                PanX = 200;
                PanDirection = 'none';
                event_perform(ev_other,ev_user1);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Key Event Listeners
if(AllowInteraction){
    //Select
    if (keyboard_check_pressed(global.SelectButton)){
        if(Action = 'Attack'){
            sound_play(MenuSelectSound);
            //Trigger battle Cutscene
            AllowInteraction = false;
            //Color, Alpha, Stop, Speed, Direction, Current Object
            CreateScreenFade(c_black,0,1,.025,'out',self.id);
        }
        else if(Action = 'Use'){
            sound_play(MenuSelectSound);
            //Trigger battle Cutscene
            AllowInteraction = false;
            //Color, Alpha, Stop, Speed, Direction, Current Object
            CreateScreenFade(c_black,0,1,.025,'out',self.id);
        }
        else if(Action = 'Give'){
            sound_play(MenuSelectSound);
            AllowInteraction = false;
            Cursor.visible = false; //Cursor becomes invisible
            ActionToPerform = 'Give';
            PanDirection = 'out';//Pan out HUD
            sound_play(MenuPanSound);
        }
        else if(Action = 'Magic'){
            sound_play(MenuSelectSound);
            //Trigger battle Cutscene
            AllowInteraction = false;
            //Color, Alpha, Stop, Speed, Direction, Current Object
            CreateScreenFade(c_black,0,1,.025,'out',self.id);
        }
    }
    
    //Back
    if (keyboard_check_pressed(global.BackButton)){
        AllowInteraction = false;
        ActionToPerform = 'BackOut'
        PanDirection = "out";
        sound_play(MenuPanSound);
    }
    
    //Left
    if (keyboard_check_pressed(global.LeftButton)){
        if(Cursor.NumberOfTargets &gt; 1){//We can switch to another target if there is more than 1
            //Pan out HUD and pathfind to next target
            ActionToPerform = 'ChangeTargets';
            AllowInteraction = false;
            PanDirection = "out";
            IncrementDirection = -1;
            sound_play(MenuPanSound);
        }
    }
    
    //Right
    if (keyboard_check_pressed(global.RightButton)){
        if(Cursor.NumberOfTargets &gt; 1){//We can switch to another target if there is more than 1
            //Pan out HUD and pathfind to next target
            ActionToPerform = 'ChangeTargets';
            AllowInteraction = false;
            PanDirection = "out";
            IncrementDirection = 1;
            sound_play(MenuPanSound);
        }
    }
    
    //Up
    if (keyboard_check_pressed(global.UpButton)){
        if(Cursor.NumberOfTargets &gt; 1){//We can switch to another target if there is more than 1
            //Pan out HUD and pathfind to next target
            ActionToPerform = 'ChangeTargets';
            AllowInteraction = false;
            PanDirection = "out";
            IncrementDirection = 1;
            sound_play(MenuPanSound);
        }
    }
    
    //Down
    if (keyboard_check_pressed(global.DownButton)){
        if(Cursor.NumberOfTargets &gt; 1){//We can switch to another target if there is more than 1
            //Pan out HUD and pathfind to next target
            ActionToPerform = 'ChangeTargets';
            AllowInteraction = false;
            PanDirection = "out";
            IncrementDirection = -1;
            sound_play(MenuPanSound);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>        PanDirection = 'right';
        sound_play(MenuPanSound);
        PerformEvent = 'Selected Item'
        AllowInteraction = false;
        PanOutDialogueBasic();
        ResetTiles();
        
        
        
        
        with(CurrentObject){//Destroy the give menu controler
            instance_destroy();
        }
        with(BattleControler){
            State = 'Stay';
            LEPanDirection = 'out';
            sound_play(MenuPanSound);
        }
        instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>TargetSelectionControler</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Takes calls from screen fade controler.
if(Action = 'Attack'){//Screen is black at this point, fade in the battle cutscene. (Scripterize this, Pass in char, target, and action!)
    var CurrentTarget, CurrentCharacter;
    CurrentTarget = Cursor.AttackList[Cursor.CurrentTarget];//guy who we are attacking
    CurrentCharacter = Cursor.TurnOrder[Cursor.CurrentTurn];//Who's turn it is
    
    ResetTiles();//Disable tile flash
    CurrentCharacter.direction = 270;//Character faces down
    BattleControler.Display = false;//disable the BattleHUD
    visible = false; //disable target battle HUD
    
    Start_Battle_Cutscene(CurrentCharacter,CurrentTarget, 'Attack');
}
else if(Action = 'Magic'){//Screen is black at this point, fade in the battle cutscene. (Scripterize this, Pass in char, target, and action!)
    var CurrentTarget, CurrentCharacter;
    CurrentTarget = Cursor.AttackList[Cursor.CurrentTarget];//guy who we are attacking
    CurrentCharacter = Cursor.TurnOrder[Cursor.CurrentTurn];//Who's turn it is
    
    ResetTiles();//Disable tile flash
    CurrentCharacter.direction = 270;//Character faces down
    BattleControler.Display = false;//disable the BattleHUD
    visible = false; //disable target battle HUD
    sound_play(battle_cutscene_BGM);
    if(global.target != 2){
        global.target = 1;
    }
    Start_Magic_Battle_Cutscene(CurrentCharacter,CurrentTarget, 'Magic',CurrentObject.SpellCastSlot,CurrentObject.SpellCastLevel);
}
else if(Action = 'Use'){//Screen is black at this point, fade in the battle cutscene. (Scripterize this, Pass in char, target, and action!)
    var CurrentTarget, CurrentCharacter;
    CurrentTarget = Cursor.AttackList[Cursor.CurrentTarget];//guy who we are attacking
    CurrentCharacter = Cursor.TurnOrder[Cursor.CurrentTurn];//Who's turn it is
    sound_play(battle_cutscene_BGM);
    global.target = 1;
    ResetTiles();//Disable tile flash
    CurrentCharacter.direction = 270;//Character faces down
    BattleControler.Display = false;//disable the BattleHUD
    visible = false; //disable target battle HUD
    
    Start_Item_Battle_Cutscene(CurrentCharacter,CurrentTarget, 'Item',CurrentCharacter.Items[UseItemBattleMenuControler.UseItemSlot],UseItemBattleMenuControler.UseItemSlot);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Facing up / down takes precidence over left / right.
//In case of a tie

var CurrentCharacter, CurrentTarget, xDifference, yDifference, xDirection, yDirection;
CurrentCharacter = Cursor.TurnOrder[Cursor.CurrentTurn];//Guy who's turn it is
CurrentTarget = Cursor.AttackList[Cursor.CurrentTarget];//Guy who we're targeting

//Calculate the difference between the two character's coordinates
xDifference = round(CurrentCharacter.x) - round(CurrentTarget.x);
yDifference = round(CurrentCharacter.y) - round(CurrentTarget.y);

//Calculate X and Y direction
//X Direction
if(xDifference &gt; 0){
    xDirection = 180 //Left
}
else if(xDifference &lt; 0){
    xDirection = 0 //right
}
else{//Same x coordinate
    xDirection = 270 //down
}
//Y Direction
if(yDifference &gt; 0){
    yDirection = 90 //up
}
else if(yDifference &lt; 0){
    yDirection = 270 //down
}
else{//Same y coordinate
    yDirection = 270 //down
}

if(abs(yDifference) &gt;= abs(xDifference)){
    CurrentCharacter.direction = yDirection;
}
else{
    CurrentCharacter.direction = xDirection;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//=============
//Exit Event ==
//=============
if(ActionToPerform = 'BackOut'){
    //If we are not already on the guy whos turn it is, pathfind to them
    if((round(Cursor.x) != round(Cursor.TurnOrder[Cursor.CurrentTurn].x))||(round(Cursor.y) != round(Cursor.TurnOrder[Cursor.CurrentTurn].y))){
        with(Cursor){
            AStar_init(global.RoomCellWidth,global.RoomCellHeight,24,24,0,0,1,0,-2,-2,0,0);
            myPath = -1;
            with (objCell){
                AStar_setBlocked(x,y,0);//Unblocks every cell. (Cursor doesnt have a move range)
            }
            myPath = AStar_findPath(x,y,TurnOrder[CurrentTurn].x,TurnOrder[CurrentTurn].y,0);
            path_start(myPath,5,0,0);
            xstart = x;
            ystart = y;
            State = 'EndTargetPathfinding';
        }
    }
    else{//Cursor is already on the character who's turn it is
        AStar_free();
        with(CurrentObject){
            event_perform(ev_other,ev_user8);
        }
        Cursor.State = 'none';
        Cursor.visible = false;
        instance_destroy();
    }
}

//=================
//Change Targets ==
//=================
else if(ActionToPerform = 'ChangeTargets'){
    //This event is called when changing targets
    Cursor.CurrentTarget += IncrementDirection;//Increment the list
    if(Cursor.CurrentTarget &lt; 0){//If we are at one end of the list, jump to the other end
        Cursor.CurrentTarget = Cursor.NumberOfTargets -1;
    }
    else if(Cursor.CurrentTarget &gt;= Cursor.NumberOfTargets){//If we are at the other end, jump to the front
        Cursor.CurrentTarget = 0;
    }
    ActionToPerform = 'FindTarget';
    event_perform(ev_other,ev_user3);//Faces character in direction of target
    event_perform(ev_other,ev_user0);//Moves cursor to the target
}

//=======
//Give ==
//=======
else if(ActionToPerform = 'Give'){
    var CurrentCharacter, CurrentTarget;
    CurrentCharacter = Cursor.TurnOrder[Cursor.CurrentTurn];
    CurrentTarget = Cursor.AttackList[Cursor.CurrentTarget];

    if(CurrentTarget.Items[4] = 0){//if target does not have a full inventory
        CurrentCharacter.direction = 270; //Have the character face down
        CurrentCharacter.image_index = BattleControler.image_index; //keeps every character marching in sync
        ResetTiles(); //Disable tile flash
        if(CurrentCharacter.Cursed = 1 and ((Get_Item_Stats(CurrentCharacter.Items[GiveItemBattleMenuControler.GiveItemSlot] ,'Cursed') = 1) and ( (CurrentCharacter.EquippedWeapon = GiveItemBattleMenuControler.GiveItemSlot) or (CurrentCharacter.EquippedItem = GiveItemBattleMenuControler.GiveItemSlot) ) )){
               CreateDialogueBasic(0,0,CurrentCharacter.Name + " likes the item too much!",TargetSelectionControler,true);
               sound_play(CurseSound);
               EnableDialogueBasic(true);
               PanDirection = 'right';
               sound_play(MenuPanSound);
               //PerformEvent = 'Selected Item'
               ResetTiles();
        }
        else{
            Trade_Item_Battle(CurrentCharacter,CurrentTarget,GiveItemBattleMenuControler.GiveItemSlot,0); //characters Trade items
            with(CurrentObject){//Destroy the give menu controler
                instance_destroy();
            }
            with(BattleControler){
                State = 'Stay';
                LEPanDirection = 'out';
                sound_play(MenuPanSound);
            }
            instance_destroy();
        }
    }
    else{//else, create "Take item" controler, pan in left
        if(CurrentCharacter.Cursed = 1 and ((Get_Item_Stats(CurrentCharacter.Items[GiveItemBattleMenuControler.GiveItemSlot] ,'Cursed') = 1) and ( (CurrentCharacter.EquippedWeapon = GiveItemBattleMenuControler.GiveItemSlot) or (CurrentCharacter.EquippedItem = GiveItemBattleMenuControler.GiveItemSlot) ) )){
               CreateDialogueBasic(0,0,CurrentCharacter.Name + " likes the item too much!",TargetSelectionControler,true);
               sound_play(CurseSound);
               EnableDialogueBasic(true);
               PanDirection = 'right';
               sound_play(MenuPanSound);
               //PerformEvent = 'Selected Item'
               ResetTiles();
        }
        else{
            Cursor.visible = false;
            instance_create(0,0,TakeItemBattleMenuControler);
            with(TakeItemBattleMenuControler){
                sound_play(MenuPanSound);
                MenuPanX = 200;
                PanDirection = 'left';
                MenuAnimTop = -1;
            }
        }
    }
}





















</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(ActionToPerform = 'FindTarget'){
    //create the battle hud (or update it if it already exists)
    var CurrentGuy;
    CurrentGuy = Cursor.AttackList[Cursor.CurrentTarget];
    CreateBattleHUD(CurrentGuy, "target");
    
    //If Cursor is not on the next target, pathfind to that guy
    if((round(Cursor.x) != round(Cursor.AttackList[Cursor.CurrentTarget].x))||(round(Cursor.y) != round(Cursor.AttackList[Cursor.CurrentTarget].y))){
        with(Cursor){
            AStar_init(global.RoomCellWidth,global.RoomCellHeight,24,24,0,0,1,0,-2,-2,0,0);
            myPath = -1;
            with(objCell){
                AStar_setBlocked(x,y,0);//Unblocks every cell. (Cursor doesnt have a move range)
            }
            myPath = AStar_findPath(x,y,AttackList[CurrentTarget].x,AttackList[CurrentTarget].y,0);
            path_start(myPath,5,0,0);
            xstart = x;
            ystart = y;
            State = 'TargetPathfinding';//State -1 means the cursor cant interact with anything, nor can the player push buttons to call cursor functions.
        }
    }
    else{//we are already on the guy so just pan in
        AStar_free();
        PanDirection = "in";
        sound_play(MenuPanSound);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//For Drawing the HUD of the target character
var CurrentGuy;
    CurrentGuy = Cursor.AttackList[Cursor.CurrentTarget];
if (!surface_exists(TargetBattleHUDSurface)){//If the surface doesnt exist, we create it.
    CreateBattleHUD(CurrentGuy, "target");
}
draw_surface(TargetBattleHUDSurface,view_xview + 73 + 182 - GetBattleHUDSize(CurrentGuy) + PanX, view_yview + 200);//Draw Land Effect Window
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
