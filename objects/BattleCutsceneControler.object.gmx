<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Pan = -64;
State = 0;
SubState = 'none';
PanDirection = 'none';

PanType = 'none';//scripted camera pan stuff
PanState = 0;//scripted camera pan stuff

Action = 'none';//This is set via target selection controler.
DialogueState = 0;
Damage = 0;
DelayState = 0;
Player = noone;

CharacterIndex = 0;
TargetIndex = 0;

NumberOfCharacters = 0;
NumberOfTargets = 0;

CurrentCharacter[CharacterIndex] = 0;
CurrentTarget[TargetIndex] = 0;


Display = true;

HasToPan = false;

EXP = 0;
Double = false;
Counter = false;
Critical = 0;
CounterDamageFlag = false;

DoubleAttack = false;

HighestZ = 0;//highest ammount of xp we can get
MinimumXP = 1;//Minimum ammount of XP recieved
Gold = 0;//the ammount of gold that is gained

Spell = 'none';
SpellLevel = 0;
SpellFlash = 20;

Delay = false;

Item = 'none';
ItemState = 0;


//Camera Pans
PlayerPanReference = 'none';
EnemyPanReference = 'none';
NextCharacter = noone;
Attacker = 'none';
Reciever = 'none';
ReturnToAttacker = true;

//Status effects
//Poison = false;







</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.Battle13Water = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Delay = false;
event_perform(ev_other,ev_user0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This is the opening pan of the cutscene
if(PanDirection = 'Start'){
    if(Pan &lt;= 0){
        Pan += 4;
        if(Pan &gt;= 0){
            Pan = 0;
            PanDirection = 'none';
            //Call user 0 to figure out what to do next
            event_perform(ev_other,ev_user0);
        }
    }
}

//Panning entire scene left, if we hit the end, Pan becomes 0 and the Sprite of the background is updated
else if(PanDirection = 'GlobalLeft'){
    if(Pan &lt;= 512){
        Pan += 32;
        if(Pan &gt;= 512){
            Pan = 0;
            PanDirection = 'none';
            //Call user 0 to figure out what to do next
            //event_perform(ev_other,ev_user0);
        }
    }
}

//Panning entire scene Right, if we hit the end, Pan becomes 0 and the Sprite of the background is updated
else if(PanDirection = 'GlobalRight'){
    if(Pan &gt;= -512){
        Pan -= 32;
        if(Pan &lt;= -512){
            Pan = 0;
            PanDirection = 'none';
            //Call user 0 to figure out what to do next
            //event_perform(ev_other,ev_user0);
        }
    }
}

//For spell flashes
if(State = 30){
    if(Action = 'Magic'){
        SpellFlash -= 1;
        if(SpellFlash &lt;= 0){
            //State = 'SpellCast';
            SpellFlash = 0;
            event_perform(ev_other,ev_user0);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//DialogueCalls
if(Action = 'Attack'){
    BattleCutsceneAttackScript();
}
else if(Action = 'Magic'){
    BattleCutsceneMagicScript();
}
else if(Action = 'Item'){
    GlobalItemUse();
}
else if(Action = 'PrimeLaserEye'){
        BattleCutscenePrimeLaserEyeScript();
    }
    else if(Action = 'FireLaserEye'){
        BattleCutsceneLaserEyeScript();
    }



//=======
//Magic==
//=======



/*

else if(State = 'EndMagicHit'){
    if(DialogueState = 0){//Pause for a third of a second before removing the dialogue
            DelayBattleCutsceneDialogue(20);
            DialogueState = 1;
    }
    else if(DialogueState = 1){//After pause,
        with(BattleCutsceneDialogueControler){//remove the dialogue
            instance_destroy();
        }
        //if more targets, pan to next
        if(TargetIndex &lt; (NumberOfTargets -1)){
            if(Get_Spell_Stats(Spell,SpellLevel,8)= 'Heal'){//if heal (or buff)
                if((TargetIndex = 0)&amp;&amp;(CurrentTarget[TargetIndex] = CurrentCharacter[CharacterIndex])){//if we have to pan out the character
                    TargetIndex += 1;
                    State = 'StartMagicPan';
                    with(CurrentTarget[TargetIndex]){
                        event_perform(ev_other,ev_user0);
                    }
                    event_perform(ev_other,ev_user0);
                }
                else{//continue pan
                    TargetIndex += 1;
                    State = 'ContinueMagicPan';
                    SubState = 'none';
                    with(CurrentTarget[TargetIndex]){
                        event_perform(ev_other,ev_user0);
                    }
                    event_perform(ev_other,ev_user0);
                }
            }
            
            else if(Get_Spell_Stats(Spell,SpellLevel,8)= 'Damage'){
                Delay = true;
                //test if player attack and if offensive spell
                CurrentTarget[TargetIndex].DisplayHUD = false;//remove the target HUD display
                //CurrentTarget[TargetIndex].PanDirection = 'GlobalLeftAlt';
                if(CurrentCharacter[CharacterIndex].Character.GuyType = 'player'){
                    CurrentTarget[TargetIndex].PanDirection = 'GlobalLeftAlt';
                }
                else if(CurrentCharacter[CharacterIndex].Character.GuyType = 'enemy'){
                    CurrentTarget[TargetIndex].PanDirection = 'GlobalLeft';
                }
                PanDirection = 'GlobalLeft';
                State = 'PostSpellCast';
                TargetIndex += 1;
                CurrentTarget[TargetIndex].Pan = -512;
                if(CurrentCharacter[CharacterIndex].Character.GuyType = 'player'){
                    CurrentTarget[TargetIndex].PanDirection = 'GlobalLeft';
                }
                else if(CurrentCharacter[CharacterIndex].Character.GuyType = 'enemy'){
                    CurrentTarget[TargetIndex].PanDirection = 'GlobalLeftAlt';
                }
                CurrentTarget[TargetIndex].visible = true;
                with(CurrentTarget[TargetIndex]){
                    event_perform(ev_other,ev_user0);
                }
            }
        }
        else{
            //if (have to pan back to caster)
            if((CurrentTarget[TargetIndex].Character.GuyType = CurrentCharacter[CharacterIndex].Character.GuyType)&amp;&amp;(CurrentCharacter[CharacterIndex] != CurrentTarget[TargetIndex])){
                CurrentTarget[TargetIndex].PanDirection = 'OutAlt';
                CurrentTarget[TargetIndex].DisplayHUD = false;
                State = 'EndMagicPan';
                Delay = true;
            }
            else{
                State = 'EndSpellAnimation';//change to end spell animation (in case of spell cast sprite difference)
                with(BattleCutsceneMagicControler){
                    instance_destroy();
                }
                event_perform(ev_other,ev_user0);
            }
        }
    }
}

//=======
//Items==
//=======
else if(State = 'UseItem'){
    UseMedicalHerbBattle();
}






</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Faded out, 
//fix battle controler, cursor sprite, delete target selection and it's menu.
//fade back in
//enemies explode,
//continue with life
if(State = 999){//end of cutscene
    with(ScreenFadeControler){
       instance_destroy();
       global.target = 0;
       if(global.battleID = 1){
        sound_loop(ShrineBGM);
        }
        else if(global.battleID = 4){
        if !audio_is_playing(BattleOnShip){
        sound_loop(BattleOnShip);
        }
        }
        else if(global.battleID = 5){
        sound_loop(BattleBGM_DevilsRevival);
        }
        else if(global.battleID = 6){
        sound_loop(Battle3BGM);
        }
        else if(global.battleID = 7){
        sound_loop(SFBattle1);
        }
        else if(global.battleID = 8){
        sound_loop(SFBattle4);
        }
        else if(global.battleID = 9){
        sound_loop(SFBattle2);
        }
        else if(global.battleID = 10){
        sound_loop(SFBattle3);
        }
        else if(global.battleID = 11){
        sound_loop(SF1BossBattle);
        }
        else if(global.battleID = 12){
        sound_loop(FlowingRiverBGM);
        }  
        else if(global.battleID = 14){
        sound_loop(SFBattle4);
        }        
        else if(global.battleID = 15){
        sound_loop(SF2Battle1);
        }
        else if(global.EndState = 1){
        sound_loop(SFRODDFINAL);
        }    
        else if(global.battleID = 21){
        sound_loop(FrontlineOST);
        }                                  
        else{
        sound_loop(Battle3BGM);
        }
        
    }
    //Cursor.State = 'LookingToPathfind';
    if(BattleControler.Deaths &gt; 0){
       with(objGuy){
           if(Dead){
                if(GuyType = 'player'){
                    SaveStats(self);//save stats on death
                }
               alarm[3] = 1;
           }
       }
       instance_destroy();
    }
    else{
        with(BattleControler){
           State = 'Stay';
           event_perform(ev_other,ev_user0);
        }
        instance_destroy();
    }
}
else{
    Display = false;
    Cursor.sprite_index = CursorSprite;//reset cursor size
    Cursor.visible = false;
    
    if(instance_exists(TargetSelectionControler)){
        with(TargetSelectionControler.CurrentObject){
            instance_destroy();
        }
        with(TargetSelectionControler){
            instance_destroy();
        }
    }
    with(BattleCutscenePlayerControler){
    
        instance_destroy();
    }
    with(BattleCutsceneEnemyControler){
        instance_destroy()
    }
    with(BattleCutsceneDialogueControler){
        instance_destroy()
    }
    with(EnemyTargetSelectionControler){
        instance_destroy();
    }
    State = 999;
    ScreenFade(0, .04, 'in', self.id);//fade into battle cutscene
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>PanBattleCutscene();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if(State = 0){
    //if we attack, cast a spell, or use an item
    if(Action = 'Attack'){
        BattleCutsceneAttackScript();
    }
    else if(Action = 'Magic'){
        BattleCutsceneMagicScript();
    }
    else if(Action = 'Item'){
        GlobalItemUse();
    }
    else if(Action = 'PrimeLaserEye'){
        BattleCutscenePrimeLaserEyeScript();
    }
    else if(Action = 'FireLaserEye'){
        BattleCutsceneLaserEyeScript();
    }



/*

else if(State = 'StartSpellCast'){//Get that spell fired up!
    CurrentCharacter[CharacterIndex].Character.Magic -= Get_Spell_Stats(Spell,SpellLevel,5);
    if(CurrentCharacter[CharacterIndex].Character.Magic &lt; 0){
        CurrentCharacter[CharacterIndex].Character.Magic = 0;
    }
    with(CurrentCharacter[CharacterIndex]){
        event_perform(ev_other,ev_user1);
    }
    State = 'FireSpell';//for the spell flash
    sound_play(SpellCastSound);
}

else if(State = 'SpellCast'){
    var Reciever, Attacker;
    Attacker = CurrentCharacter[CharacterIndex];
    Reciever = CurrentTarget[TargetIndex];
    
    //create spell controler
    instance_create(0,0,BattleCutsceneMagicControler);
    State = 'PostSpellCast';
    if((Reciever.Character.GuyType = Attacker.Character.GuyType)&amp;&amp;(Attacker != Reciever)){
        HasToPan = true;
    }
}

else if(State = 'PostSpellCast'){
    //either pan or deal damage
    //if target is same guytype as caster, we have to pan
    
    var Reciever, Attacker;
    Attacker = CurrentCharacter[CharacterIndex];
    Reciever = CurrentTarget[TargetIndex];
    
    if(HasToPan){
        //we have to pan
        //pan character out, (if not panned out already)
        //pan target in
        if(SubState = 'CharacterFinishedPanning'){
            if(Delay){//Second, Pan target in
                Reciever.Pan = -256;
                Reciever.PanDirection = 'InAlt';
                Reciever.visible = true;
                Reciever.FaceDirection = 'Alt';
                alarm[0] = 20;
            }
            else{
                //finally, re-call this event without needing to pan any further
                HasToPan = false;
                Delay = true;
                event_perform(ev_other,ev_user0);
            }
        }
        else{//First, Pan caster out,
            Attacker.PanDirection = 'Out';
            Attacker.DisplayHUD = false;
            Delay = true;
            //substate becomes "char finished panning"
        }
    }
    else{//we dont need to pan, targeting self or enemy
        with(Reciever){
            event_perform(ev_other,ev_user1);
        }
        
        Reciever.DisplayHUD = true; //Dont display attackee HUD
        //if we pan, pause briefly then continue to the hit portion
        if(Delay){
            alarm[0] = 20;
        }
        else{
            //play hit animation and take damage.
            
            if(Get_Spell_Stats(Spell,SpellLevel,8)= 'Damage'){
                //test for critical attack
                if(Test_Critical_Hit(CurrentCharacter[CharacterIndex].Character)){
                    Critical = 1;
                }
                Damage = round(Get_Spell_Stats(Spell,SpellLevel,2)*(1 + .25*Critical));
                if(Damage &lt;= 0){
                    Damage = 1;
                }
                Reciever.Character.Health -= Damage;
                if(Reciever.Character.Health &lt;= 0){
                    Reciever.Character.Health = 0;
                    BattleControler.Deaths +=1;
                    Reciever.Character.Dead = true;
                }
                with(Reciever){
                    event_perform(ev_other,ev_user1);
                    Hit = 10;
                    HitFlash = 0;
                    State = 'Hit';
                    sound_play(HitSound);
                }
                State = 'EndMagicHit';
                if(Attacker.Character.GuyType = 'player'){//add XP only if the player does damage
                    if(Calculate_Z(Attacker.Character,Reciever.Character) &gt; HighestZ){//remember what our XP cap is.
                        HighestZ = Calculate_Z(Attacker.Character,Reciever.Character);
                    }
                    EXP += Calculate_EXP(Calculate_Z(Attacker.Character,Reciever.Character),Damage,Reciever.Character.MaxHealth,1,Reciever.Character.Dead)//Z,D,M,Min,Bonus
                }
            }
            else if(Get_Spell_Stats(Spell,SpellLevel,8)= 'Heal'){//no hit animation, 
            
                Damage = Get_Spell_Stats(Spell,SpellLevel,2);
                if(Damage &gt; (Reciever.Character.MaxHealth - Reciever.Character.Health)){
                    Damage = (Reciever.Character.MaxHealth - Reciever.Character.Health);
                }
                Reciever.Character.Health += Damage;//Damage wont go over maxHP, no need to test a second time
                HighestZ = 25;
                EXP += Calculate_EXP(25,Damage,Reciever.Character.MaxHealth,10,false)//Z,D,M,Min,Bonus
                with(Reciever){
                    event_perform(ev_other,ev_user1);
                    sound_play(HealSound);
                }
                State = 'EndMagicHit';
                event_perform(ev_other,ev_user0);
            }
        }
    }
}


else if(State = 'EndMagicHit'){//Target just finished performing hit animation
    var Attacker, Reciever;
    Attacker = CurrentCharacter[CharacterIndex];
    Reciever = CurrentTarget[TargetIndex];  
    
    if(Get_Spell_Stats(Spell,SpellLevel,8)= 'Damage'){
        if(Critical = 1){
            CreateBattleDialogueBasic(WordWrap('Critical Hit!#' + string(Reciever.Character.Name) + ' took ' + string(Damage) + '  Damage!',200,'#',false), self.id);
        }
        else{
            CreateBattleDialogueBasic(WordWrap(string(Reciever.Character.Name) + ' took ' + string(Damage) + '  Damage!',200,'#',false), self.id);
        }
        if(Reciever.Character.Health &lt;= 0){
            AppendBattleCutsceneDialogueBasic(WordWrap('#'+string(Reciever.Character.Name)+' was defeated.@@ ',200,'#',false));
            if(Attacker.Character.GuyType = 'player'){
                Attacker.Character.Kills += 1;
            }
            if(Reciever.Character.GuyType = 'player'){
                global.IsDead[Reciever.Character.ID] = true;
                Reciever.Character.Defeats += 1;
            }
            Reciever.Dead = true;
        }
        else{
            AppendBattleCutsceneDialogueBasic('@@ ');
        }
        DialogueState = 0;
        Critical = 0;
    }
    else if(Get_Spell_Stats(Spell,SpellLevel,8)= 'Heal'){
        CreateBattleDialogueBasic(WordWrap(string(Reciever.Character.Name) + ' regained ' + string(Damage) + '  Health!@@ ',200,'#',false), self.id);
    }
}



else if(State = 'EndMagicPan'){
    var Attacker, Reciever;
    Attacker = CurrentCharacter[CharacterIndex];
    Reciever = CurrentTarget[TargetIndex]; 
    
    if(Delay){//Second, Pan target in
        Attacker.Pan = 256;
        Attacker.PanDirection = 'In';
        Attacker.visible = true;
        Attacker.FaceDirection = 'Normal';
        Attacker.State = 'none';
        with(Attacker){
            event_perform(ev_other,ev_user0);
        }
        alarm[0] = 20;
    }
    else{
        //finally, re-call this event without needing to pan any further
        State = 'EndSpellAnimation';//change to end spell animation (in case of spell cast sprite difference)
        with(BattleCutsceneMagicControler){
            instance_destroy();
        }
        event_perform(ev_other,ev_user0);
    }
}


else if(State = 'ContinueMagicPan'){
    var RecieverOld, Reciever;
    RecieverOld = CurrentTarget[TargetIndex-1];
    Reciever = CurrentTarget[TargetIndex]; 
    
    if(SubState = 'CharacterFinishedPanning'){
        if(Delay){//Second, Pan target in
            Reciever.Pan = -256;
            Reciever.PanDirection = 'InAlt';
            Reciever.visible = true;
            Reciever.FaceDirection = 'Alt';
            alarm[0] = 20;
        }
        else{
            //finally, re-call this event without needing to pan any further
            HasToPan = false;
            Delay = true;
            State = 'PostSpellCast';
            event_perform(ev_other,ev_user0);
        }
    }
    else{//First, Pan caster out,
        RecieverOld.PanDirection = 'OutAlt';
        RecieverOld.DisplayHUD = false;
        Delay = true;
        //substate becomes "char finished panning"
    }
}


else if(State = 'StartMagicPan'){
    var Attacker, Reciever;
    Attacker = CurrentCharacter[CharacterIndex];
    Reciever = CurrentTarget[TargetIndex];

    if(SubState = 'CharacterFinishedPanning'){
        if(Delay){//Second, Pan target in
            Reciever.Pan = -256;
            Reciever.PanDirection = 'InAlt';
            Reciever.visible = true;
            Reciever.FaceDirection = 'Alt';
            
            alarm[0] = 20;
        }
        else{
            //finally, re-call this event without needing to pan any further
            Delay = true;
            State = 'PostSpellCast'
            event_perform(ev_other,ev_user0);
        }
    }
    else{//First, Pan caster out,
        Attacker.PanDirection = 'Out';
        Attacker.DisplayHUD = false;
        Delay = true;
        //substate becomes "char finished panning"
    }
}

else if(State = 'EndSpellAnimation'){//Play end attack animation
    var Attacker, Reciever;
    Attacker = CurrentCharacter[CharacterIndex];
    Reciever = CurrentTarget[TargetIndex];  
    
    State = 'EndAttackPhase';
    if((Get_Spell_Stats(Spell,SpellLevel,8)= 'Heal')&amp;&amp;(Attacker != Reciever)){
        event_perform(ev_other,ev_user0);
    }
    else {
        with(Attacker){
            State = 'EndSpellAnimation';
            event_perform(ev_other,ev_user0);
        }
    }
}

//==========
//Item Use =
//==========

else if(State = 'UseItem'){
    //call item script to perform action?
    //if no spell animation, 
    UseMedicalHerbBattle();
    
}



























</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.battleID = 1){
sprite_battle = Battle1BackgroundSprite
}
else if (global.battleID = 2){
sprite_battle = Battle2BackgroundSprite
}

else if (global.battleID = 3){
sprite_battle = Battle4BackgroundSprite
}

else if (global.battleID = 4){
sprite_battle = Battle4BackgroundSprite
}

else if (global.battleID = 5){
sprite_battle = Battle5BackgroundSprite
}

else if (global.battleID = 6){
sprite_battle = Battle6BackgroundSprite
}

else if (global.battleID = 7){
sprite_battle = Battle7BackgroundSprite
}

else if (global.battleID = 8){
sprite_battle = Battle8BackgroundSprite
}

else if (global.battleID = 9){
sprite_battle = Battle9BackgroundSprite
}

else if (global.battleID = 10){
sprite_battle = Battle10BackgroundSprite
}

else if (global.battleID = 11){
sprite_battle = Battle11BackgroundSprite
}

else if (global.battleID = 12){
sprite_battle = Battle12BackgroundSprite
}

else if (global.battleID = 13){
    if (global.Battle13Water = 1){
        sprite_battle = Battle13BBackgroundSprite
    }
    else{
        sprite_battle = Battle13BackgroundSprite
    }
}

else if (global.battleID = 14){
sprite_battle = Battle14BackgroundSprite
}

else if (global.battleID = 15){
sprite_battle = Battle15BackgroundSprite
}

else if (global.battleID = 16){
sprite_battle = Battle16BackgroundSprite
}

else if (global.battleID = 17){
sprite_battle = Battle17BackgroundSprite
}

else if (global.battleID = 18){
sprite_battle = Battle18BackgroundSprite
}

else if (global.battleID = 19){
sprite_battle = Battle19BackgroundSprite
}

else if (global.battleID = 20){
sprite_battle = Battle20BackgroundSprite
}

else if (global.battleID = 21){
sprite_battle = Battle21BackgroundSprite
}

else if (global.battleID = 22){
sprite_battle = Battle22BackgroundSprite
}


else{
sprite_battle = PlainsBackgroundSprite
}



if(Display){
    if((State = 30)&amp;&amp;(Action = 'Magic')){
        if(SpellFlash mod 2 = 0){
            if (BattleCutsceneControler.Spell = 'Blaze'){
            draw_set_color(c_red);//script for flash color
            }
            else if (BattleCutsceneControler.Spell = 'Attack'){
            draw_set_color(c_red);//script for flash color
            }
            else if (BattleCutsceneControler.Spell = 'Desoul'){
            draw_set_color(c_red);//script for flash color
            }
            else if (BattleCutsceneControler.Spell = 'Katon'){
            draw_set_color(c_red);//script for flash color
            }                      
            else if (BattleCutsceneControler.Spell = 'Quick'){
            draw_set_color(c_yellow);//script for flash color
            }      
            else if (BattleCutsceneControler.Spell = 'Freeze'){
            FreezeCol = make_colour_rgb(33,36,255);
            draw_set_color(FreezeCol);//script for flash color
            
            }
            else if (BattleCutsceneControler.Spell = 'Blast'){
            draw_set_color(c_aqua);//script for flash color
            }
            else{draw_set_color(c_yellow);}//script for flash color}
        }
        else{
            draw_set_color(c_black);
        }
            draw_rectangle(0,0,room_width,room_height,c_black);
            draw_set_color(c_white);
    }
    else{
        draw_set_color(c_black);
        draw_rectangle(0,0,room_width,room_height,c_black);
        draw_set_color(c_white);
    }
    //draw_set_color(make_color_rgb(255,102,102));
    draw_sprite_ext(sprite_battle,0,view_xview+Pan,view_yview+80,1,1,0,draw_get_color(),1); //Current Battle Background (sprite as a variable?)
    if(Reciever.FaceDirection = 'Alt' and global.CastEnd = 0){
        if (global.battleID = 1){
            draw_sprite(Battle01Tile01,0,view_xview+23+Pan,view_yview+162); //Start Addition Background
        }
        else{
            if (global.Tile = 0) {
                draw_sprite(Tile01,0,view_xview+23+Pan,view_yview+162); //Start Addition Background
            }
            else if (global.Tile = 1) {
                draw_sprite(Tile01,0,view_xview+23+Pan,view_yview+162); //Start Addition Background
            }
            else if (global.Tile = 2) {
                draw_sprite(Tile02,0,view_xview+23+Pan,view_yview+162); //Start Addition Background
            }
            else if (global.Tile = 3) {
                draw_sprite(Tile03,0,view_xview+23+Pan,view_yview+162); //Start Addition Background
            }
            else if (global.Tile = 4) {
                draw_sprite(Tile04,0,view_xview+23+Pan,view_yview+162); //Start Addition Background
            }
            else if (global.Tile = 5) {
                draw_sprite(Tile05,0,view_xview+23+Pan,view_yview+162); //Start Addition Background
            }        
            else if (global.Tile = 6) {
                draw_sprite(Tile06,0,view_xview+23+Pan,view_yview+162); //Start Addition Background
            }        
            else if (global.Tile = 7) {
                draw_sprite(Tile07,0,view_xview+23+Pan,view_yview+162); //Start Addition Background
            }        
            else if (global.Tile = 8) {
                draw_sprite(Tile08,0,view_xview+23+Pan,view_yview+162); //Start Addition Background
            }        
            else if (global.Tile = 9) {
                draw_sprite(Tile09,0,view_xview+23+Pan,view_yview+162); //Start Addition Background
            }    
        }
    }
    else if (global.PanEnemy = 1){

    }
    else{
        if (global.battleID = 1){
            draw_sprite(Battle01Tile01,0,view_xview+137+Pan,view_yview+162); //Start Addition Background
        }
        else{ //Default Tiles
            if (global.Tile = 0) {
                draw_sprite(Tile01,0,view_xview+137+Pan,view_yview+162); //Start Addition Background
            }
            else if (global.Tile = 1) {
                draw_sprite(Tile01,0,view_xview+137+Pan,view_yview+162); //Start Addition Background
            }
            else if (global.Tile = 2) {
                draw_sprite(Tile02,0,view_xview+137+Pan,view_yview+162); //Start Addition Background
            }
            else if (global.Tile = 3) {
                draw_sprite(Tile03,0,view_xview+137+Pan,view_yview+162); //Start Addition Background
            }
            else if (global.Tile = 4) {
                draw_sprite(Tile04,0,view_xview+137+Pan,view_yview+162); //Start Addition Background
            }
            else if (global.Tile = 5) {
                draw_sprite(Tile05,0,view_xview+137+Pan,view_yview+162); //Start Addition Background
            }        
            else if (global.Tile = 6) {
                draw_sprite(Tile06,0,view_xview+137+Pan,view_yview+162); //Start Addition Background
            }        
            else if (global.Tile = 7) {
                draw_sprite(Tile07,0,view_xview+137+Pan,view_yview+162); //Start Addition Background
            }        
            else if (global.Tile = 8) {
                draw_sprite(Tile08,0,view_xview+137+Pan,view_yview+162); //Start Addition Background
            }        
            else if (global.Tile = 9) {
                draw_sprite(Tile09,0,view_xview+137+Pan,view_yview+162); //Start Addition Background
            }
        }        
    }
    
    
    
      
    if(PanDirection = 'Start'){
        draw_sprite(sprite_battle,0,view_xview+256+Pan,view_yview+80); //Start Addition Background                               
    }
    if(PanDirection = 'GlobalLeft'){
        draw_sprite(BlueTransitionBackgroundSprite,0,view_xview-256+Pan,view_yview+80); //Start Addition Background
        draw_sprite(sprite_battle,0,view_xview-512+Pan,view_yview+80); //Start Addition Background
    }
    
    if(PanDirection = 'GlobalRight'){
        draw_sprite(BlueTransitionBackgroundSprite,0,view_xview+256+Pan,view_yview+80); //Start Addition Background
        draw_sprite(sprite_battle,0,view_xview+512+Pan,view_yview+80); //Start Addition Background
    }
           
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
